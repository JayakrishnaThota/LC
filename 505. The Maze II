//O(mn*max(m,n)) time and O(mn) space
class Solution {
    
    class Point{
        int x;
        int y;
        int distance;
        public Point(int x, int y, int distance){
            this.x = x;
            this.y = y;
            this.distance = distance;
        }
    }
    
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        if(maze==null || maze.length==0) return 0;
        int m = maze.length, n = maze[0].length;
        int[][] distance = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                distance[i][j] = Integer.MAX_VALUE;
            }
        }
        int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        Queue<Point> queue = new LinkedList();
        queue.offer(new Point(start[0],start[1],0));
        while(!queue.isEmpty()){
            Point point = queue.poll();
            int px = point.x;
            int py = point.y;
            int pd = point.distance;
            if(distance[px][py]<=pd) continue;
            distance[px][py] = pd;
            for(int[] dir:dirs){
                int x = px, y = py, d=pd;
                while(x>=0 && y>=0 && x<m && y<n && maze[x][y]==0){
                    x+=dir[0];
                    y+=dir[1];
                    d++;
                }
                x-=dir[0];
                y-=dir[1];
                d--;
                queue.offer(new Point(x,y,d));
            }
        }
        return distance[destination[0]][destination[1]]<Integer.MAX_VALUE ? distance[destination[0]][destination[1]] : -1;
    }
}

//O(mn*log(mn)) time and O(mn) space
class Solution {
    
    class Point{
        int x;
        int y;
        int distance;
        public Point(int x, int y, int distance){
            this.x = x;
            this.y = y;
            this.distance = distance;
        }
    }
    
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        if(maze==null || maze.length==0) return 0;
        int m = maze.length, n = maze[0].length;
        int[][] distance = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                distance[i][j] = Integer.MAX_VALUE;
            }
        }
        int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        PriorityQueue<Point> queue = new PriorityQueue<Point>((p,q)->(p.distance-q.distance));
        queue.offer(new Point(start[0],start[1],0));
        while(!queue.isEmpty()){
            Point point = queue.poll();
            int px = point.x;
            int py = point.y;
            int pd = point.distance;
            if(distance[px][py]<=pd) continue;
            distance[px][py] = pd;
            for(int[] dir:dirs){
                int x = px, y = py, d=pd;
                while(x>=0 && y>=0 && x<m && y<n && maze[x][y]==0){
                    x+=dir[0];
                    y+=dir[1];
                    d++;
                }
                x-=dir[0];
                y-=dir[1];
                d--;
                queue.offer(new Point(x,y,d));
            }
        }
        return distance[destination[0]][destination[1]]<Integer.MAX_VALUE ? distance[destination[0]][destination[1]] : -1;
    }
}

//O(TlogT) time and O(target)
class Solution {
    public int racecar(int target) {
        if(target<1) return 0;
        int[] dp = new int[target+1];
        for(int i=1;i<=target;i++) {
            int rightBound = (Integer.highestOneBit(i)<<1) - 1;
            int leftBound = rightBound/2;
            int steps = Integer.bitCount(rightBound);
            if(i==rightBound) {
                dp[i] = steps;
            } else {
                //Overspeed
                dp[i] = steps + 1 + dp[rightBound-i];
                //Underspeed
                for(int m=0;m<steps-1;m++) {
                    int backDistance = (1<<m)-1;
                    //steps - 1 to reach leftBound, 1 for Reverse, m steps for reaching backDistance, 1 step for R
                    int u = (steps - 1) + 1 + m + 1 + dp[i+backDistance-leftBound];
                    dp[i] = Math.min(dp[i], u);
                }
            } 
        }
        return dp[target];
    }
}

//O(tlogt) time and O(t) space
class Solution {
    public int racecar(int target) {
        int[] dp = new int[target + 1];
        for (int i = 1; i <= target; i++){
            int bound = (Integer.highestOneBit(i) << 1) - 1;
            int n = Integer.bitCount(bound);
            if (i == bound){
                dp[i] = n;
            } else {
                // overspeed
                dp[i] = dp[bound - i] + n + 1; // Reverse once
                // underspeed
                bound >>= 1;
                for (int j = 0; j < n; j++){
                    int gap = (1 << j) - 1;
                    dp[i] = Math.min(dp[i], dp[i - bound + gap] + n + j + 1); // Reverse twice
                }
            }
        }
        return dp[target];
    }
}

//O(n^3) time and O(n^2) space
class Solution {
    public String encode(String s) {
        if(s==null || s.length()<5) return s;
        int n = s.length();
        String[][] dp = new String[n][n];
        for(int l=0;l<n;l++) {
            for(int i=0;i<n-l;i++) {
                int j = i+l;
                String key = s.substring(i, j+1);
                dp[i][j] = key;
                if(j+1-i>=5) {
                    for(int k=i;k<j;k++) {
                        String splitStr = dp[i][k] + dp[k+1][j];
                        if(splitStr.length()<dp[i][j].length()) {
                            dp[i][j] = splitStr;
                        }
                    }
                    //Check if repeated substring of key is smaller
                    for(int k=0;k<key.length();k++) {
                        String repeatStr = key.substring(0,k+1);
                        if(!valid(key, repeatStr)) continue;
                        String newStr = key.length()/repeatStr.length() + "[" + dp[i][i+k] + "]";
                        if(newStr.length()<dp[i][j].length()) {
                            dp[i][j] = newStr;
                        }
                    }
                }
            }
        } 
        return dp[0][n-1];
    }
    
    public boolean valid(String key, String repeatStr) {
        if(repeatStr==null || repeatStr.length()<1) return false;
        int m = key.length(), n = repeatStr.length();
        if(m%n!=0) return false;
        StringBuffer sb = new StringBuffer();
        for(int k=0;k<(m/n);k++) {
            sb.append(repeatStr);
        }
        return sb.toString().equals(key);
    }
    
}

//O(n) time and space
class Solution {
    public int sumSubarrayMins(int[] arr) {
        if(arr==null || arr.length==0) return 0;
        int n = arr.length, mod = (int)1e9 + 7;
        long res = 0;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<int[]> leftStack = new Stack();
        Stack<int[]> rightStack = new Stack();
        for(int i=0;i<n;i++) {
            int count = 1;
            while(!leftStack.isEmpty() && leftStack.peek()[0]>arr[i]) {
                count+=leftStack.pop()[1];
            }
            left[i] = count;
            leftStack.push(new int[]{arr[i], count});
        }
        for(int i=n-1;i>=0;i--) {
            int count = 1;
            while(!rightStack.isEmpty() && rightStack.peek()[0]>=arr[i]) {
                count+=rightStack.pop()[1];
            }
            right[i] = count;
            rightStack.push(new int[]{arr[i], count});
        }
        for(int i=0;i<n;i++) {
            res = (res + (long)arr[i]*left[i]*right[i])%mod;
        }
        return (int)res;
    }
}

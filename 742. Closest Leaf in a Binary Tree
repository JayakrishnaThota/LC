//O(N) time and space
class Solution {
    Map<TreeNode, Set<TreeNode>> adjlist;
    public int findClosestLeaf(TreeNode root, int k) {
        adjlist = new HashMap();
        dfs(root, null);
        return bfs(k);
    }
    
    public void dfs(TreeNode root, TreeNode parent) {
        if(root==null) return;
        adjlist.putIfAbsent(root, new HashSet());
        adjlist.putIfAbsent(parent, new HashSet());
        adjlist.get(parent).add(root);
        adjlist.get(root).add(parent);
        dfs(root.left, root);
        dfs(root.right, root);
    }
    
    public int bfs(int k) {
        Queue<TreeNode> queue = new LinkedList();
        Set<TreeNode> set = new HashSet();
        for(TreeNode key:adjlist.keySet()) {
            if(key!=null && key.val==k) {
                queue.offer(key);
                set.add(key);
            }
        }
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int j=0;j<size;j++) {
                TreeNode u = queue.poll();
                if(u!=null && adjlist.get(u).size()<=1) return u.val;
                for(TreeNode v:adjlist.get(u)) {
                    if(set.contains(v)) continue;
                    set.add(v);
                    queue.offer(v);
                }
            }
        }
        return -1;
    }
    
}

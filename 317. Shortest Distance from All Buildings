//O((mn)^2) time and O(mn) space
class Solution {
    int[][] dirs = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};
    public int shortestDistance(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        int[][] distance = new int[m][n];
        int[][] reach = new int[m][n];
        int buildingCount = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    buildingCount++;
                    bfs(grid, distance, reach, i, j);
                }
            }
        }
        int result = Integer.MAX_VALUE;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if((grid[i][j]==0)&&(reach[i][j]==buildingCount)){
                    result = Math.min(result, distance[i][j]);
                }
            }
        }
        return (result==Integer.MAX_VALUE)?-1:result;
    }
    
    public void bfs(int[][] grid, int[][] distance, int[][] reach, int i, int j){
        int m = grid.length, n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> q = new LinkedList();
        q.offer(new int[]{i,j});
        int level = 1;
        while(!q.isEmpty()){
            int size = q.size();
            for(int k=0;k<size;k++){
                int[] temp = q.poll();
                for(int[] dir:dirs){
                    int x = dir[0] + temp[0];
                    int y = dir[1] + temp[1];
                    if(x<0 || x>=m || y<0 || y>=n) continue;
                    if((grid[x][y]!=0)||(visited[x][y])) continue;
                    distance[x][y]+=level;
                    reach[x][y]++;
                    visited[x][y] = true;
                    q.offer(new int[]{x,y});
                }
            }
            level++;
        }
    }
}

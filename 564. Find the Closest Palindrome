//O(1) time and space
class Solution {
    public String nearestPalindromic(String n) {
        int len = n.length();
        //12345, 1234
        int i = (len%2==0) ? len/2 : len/2 + 1;
        //123, 12
        Long half = Long.parseLong(n.substring(0, i));

        List<Long> candidates = new ArrayList();
        candidates.add(getPalindrome(half, len % 2 == 0)); // 12321, 1221
        candidates.add(getPalindrome(half+1, len % 2 == 0)); // 12421, 1331
        candidates.add(getPalindrome(half-1, len % 2 == 0)); // 12221, 1111
        candidates.add((long)Math.pow(10, len-1) - 1); // 9999, 999
        candidates.add((long)Math.pow(10, len) + 1); // 100001, 10001

        return nearest(Long.parseLong(n), candidates);
    }

    private String nearest(Long s, List<Long> candidates) {
        long res = 0, min = Long.MAX_VALUE;
        for(Long cand:candidates) {
            if(cand.equals(s)) {
                continue;
            }
            if(Math.abs(s-cand) < min) {
                min = Math.abs(s-cand);
                res = cand;
            } else if(Math.abs(s-cand) == min) {
                res = Math.min(res, cand);
            }
        }
        return String.valueOf(res);
    }

    private long getPalindrome(long left, boolean even) {
        long res = left;
        if (!even) left = left / 10;
        while (left > 0) {
            res = res * 10 + left % 10;
            left /= 10;
        }
        return res;
    }
}

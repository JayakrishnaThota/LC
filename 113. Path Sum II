//O(n^2) time and O(n) space
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList();
        List<Integer> list = new ArrayList();
        helper(result, list, root, sum);
        return result;
    }
    
    public void helper(List<List<Integer>> result, List<Integer> list, TreeNode root, int sum) {
        if(root==null) return;
        list.add(root.val);
        if(root.val==sum && root.left==null && root.right==null) {
            result.add(new ArrayList(list));
        }
        else {
            helper(result, list, root.left, sum-root.val);
            helper(result, list, root.right, sum-root.val);
        }
        list.remove(list.size()-1);
    }
    
}

//O(n/2!) time and O(n) space
public class Solution {
    
    public List<String> generatePalindromes(String s) {
        Set<String> result = new HashSet();
        if(s==null || s.length()==0) return new ArrayList(result);
        int[] map = new int[256];
        if(!canPermutePalindrome(s, map)) return new ArrayList(result);
        char oddMiddle = 0;
        char[] ch = new char[s.length()/2];
        int chIndex = 0;
        for(int i=0;i<256;i++) {
            if((map[i]&1)==1) oddMiddle = (char)i;
            for(int j=0;j<map[i]/2;j++) {
                ch[chIndex++] = (char)i;
            }
        }
        permute(result, ch, oddMiddle, 0);
        return new ArrayList(result);
    }
    
    public boolean canPermutePalindrome(String s, int[] map) {
        if(s==null || s.length()==0) return true;
        int odd = 0;
        for(char c:s.toCharArray()) {
            map[c]++;
        }
        for(int i=0;i<256;i++) {
            if((map[i]&1)==1) odd++;
        }
        return (odd<=1);
    }
    
    public void swap(char[] ch, int i, int j) {
        char temp = ch[i];
        ch[i] = ch[j];
        ch[j] = temp;
    }
    
    public void permute(Set<String> set, char[] ch, char oddMiddle, int index) {
        if(index==ch.length) {
            String s = String.valueOf(ch);
            String rev = new StringBuffer(s).reverse().toString();
            String finalString = s+((oddMiddle==0)?"":oddMiddle)+rev;
            set.add(finalString);
            return;
        }
        for(int i=index;i<ch.length;i++) {
            if (ch[index] != ch[i] || index == i) {
                swap(ch,index,i);
                permute(set, ch, oddMiddle, index+1);
                swap(ch,index,i);
            }
        }
    }
    
}

/*

Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true

Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false

Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.


*/

//O(V+E) time and space
class Solution {
    Map<Integer, List<Integer>> adjlist;
    Set<Integer> visited;
    public boolean validTree(int n, int[][] edges) {
        initialise(n,edges);
        if(hasCycle(0,-1)) return false;
        return (visited.size()==n);
    }
    public void initialise(int n, int[][] edges){
        adjlist = new HashMap();
        visited = new HashSet();
        for(int i=0;i<n;i++){
            adjlist.put(i, new ArrayList<Integer>());
        }
        for(int[] edge:edges){
            adjlist.get(edge[0]).add(edge[1]);
            adjlist.get(edge[1]).add(edge[0]);
        }
    }
    public boolean hasCycle(int u, int parent){
        if(visited.contains(u)) return true;
        visited.add(u);
        for(Integer v:adjlist.get(u)){
            if(parent==v) continue;
            if(hasCycle(v,u)) return true;
        }
        return false;
    }
}

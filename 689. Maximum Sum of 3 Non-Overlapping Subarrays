//O(n) time and space
class Solution {
    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int n = nums.length, runningSumOfLastKNums = 0;
        int[] prefixSumOfLengthK = new int[n+1-k];
        for(int i=0;i<n;i++) {
            runningSumOfLastKNums += nums[i];
            if(i>=k) {
                runningSumOfLastKNums-=nums[i-k];
            }
            if(i>=k-1) {
                prefixSumOfLengthK[i+1-k] = runningSumOfLastKNums;
            }
        }
        int chunksSize = prefixSumOfLengthK.length;
        int leftMaxIndex = 0, rightMaxIndex = chunksSize-1;
        int[] left = new int[chunksSize];
        int[] right = new int[chunksSize];
        // Populate left
        for(int i=0;i<chunksSize;i++) {
            if(prefixSumOfLengthK[i]>prefixSumOfLengthK[leftMaxIndex]) {
                leftMaxIndex = i;
            }
            left[i] = leftMaxIndex;
        }
        // Populate right
        for(int i=chunksSize-1;i>=0;i--) {
            if(prefixSumOfLengthK[i]>=prefixSumOfLengthK[rightMaxIndex]) {
                rightMaxIndex = i;
            }
            right[i] = rightMaxIndex;
        }
        int[] res = new int[3];
        Arrays.fill(res, -1);
        for(int j=k;j<chunksSize-k;j++) {
            int i = left[j-k], l = right[j+k];
            int curSum = prefixSumOfLengthK[i] + prefixSumOfLengthK[j] + prefixSumOfLengthK[l];
            if(res[0]==-1 || curSum> prefixSumOfLengthK[res[0]] + prefixSumOfLengthK[res[1]] + prefixSumOfLengthK[res[2]]) {
                res[0] = i;
                res[1] = j;
                res[2] = l;
            }
        }
        return res;
    }
}

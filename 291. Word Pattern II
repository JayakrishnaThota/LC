class Solution {
    public boolean wordPatternMatch(String pattern, String str) {
        Map<Character, String> map = new HashMap();
        Set<String> set = new HashSet();
        return backtrack(pattern, 0, str, 0, map, set);
    }
    
    public boolean backtrack(String pattern ,int j, String s, int i, Map<Character, String> map,
                            Set<String> set){
        if(i==s.length() && j==pattern.length()) return true;
        if(i==s.length() || j==pattern.length()) return false;
        char c = pattern.charAt(j);
        if(map.containsKey(c)){
            String key = map.get(c);
            if(!s.startsWith(key,i))
                return false;
            return backtrack(pattern,j+1,s,i+key.length(),map,set);
        }
        for(int k=i;k<s.length();k++){
            String key = s.substring(i,k+1);
            if(set.contains(key)) continue;
            set.add(key);
            map.put(c,key);
            if(backtrack(pattern,j+1,s,i+key.length(),map,set)) return true;
            set.remove(key);
            map.remove(c);
        }
        return false;
    }
    
}

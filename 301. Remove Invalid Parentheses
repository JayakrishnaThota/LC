//O(n*2^n) time and O(2^n) space
class Solution {
    public List<String> removeInvalidParentheses(String s) {
        List<String> result = new ArrayList();
        Queue<String> queue = new LinkedList();
        Set<String> visited = new HashSet();
        queue.offer(s);
        visited.add(s);
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                String key = queue.poll();
                if(isBalanced(key)) {
                    result.add(key);
                } else {
                    int n = key.length();
                    for(int i=0;i<n;i++) {
                        char c = key.charAt(i);
                        if(c!='(' && c!=')') continue;
                        String newKey = key.substring(0,i) + key.substring(i+1);
                        if(visited.add(newKey)) {
                            queue.offer(newKey);
                        }
                    }
                }
            }
            if(result.size()>0) break;
        }
        if(result.size()==0) {
            result.add("");
        }
        return result;
    }

    private boolean isBalanced(String s) {
        if(s==null || s.length()==0) return true;
        int bal = 0;
        for(char c:s.toCharArray()) {
            if(c=='(') bal++;
            else if(c==')') {
                bal--;
                if(bal<0) return false;
            }
        }
        return (bal==0);
    }

}

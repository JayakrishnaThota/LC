/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    
    public Node() {
        children = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        children = new ArrayList<Node>();
    }
    
    public Node(int _val,ArrayList<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
//O(n) time and space
class Solution {
    public Node findRoot(List<Node> tree) {
        Map<Integer, Set<Integer>> adjlist = new HashMap();
        for(Node t:tree) {
            int u = t.val;
            for(Node child:t.children) {
                int v = child.val;
                adjlist.putIfAbsent(v, new HashSet());
                adjlist.get(v).add(u);
            }
        }
        for(Node key:tree) {
            if(!adjlist.containsKey(key.val) || adjlist.get(key.val).size()==0) return key;
        }
        return null;
    }
}

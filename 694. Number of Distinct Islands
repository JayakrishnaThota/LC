//O(mn) time and space
class Solution {
    
    public int numDistinctIslands(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        Set<String> set = new HashSet();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    StringBuffer sb = new StringBuffer();
                    dfs(grid,i,j,m,n,sb,"s");
                    set.add(sb.toString());
                }
            }
        }
        return set.size();
    }
    
    public void dfs(int[][] grid, int i, int j, int m, int n, StringBuffer sb, String path){
        if(i<0 || j<0 || i==m || j==n || grid[i][j]!=1) return;
        sb.append(path);
        grid[i][j] = 0;
        dfs(grid, i+1,j,m,n,sb,"R");
        dfs(grid, i-1,j,m,n,sb,"L");
        dfs(grid, i,j+1,m,n,sb,"U");
        dfs(grid, i,j-1,m,n,sb,"D");
        sb.append("e");
    }
}

//O(n^2) time and O(n) space
class Solution {
    public int maxPoints(int[][] points) {
        if (points == null || points.length == 0) return 0;
        if (points.length <= 2) return points.length;
        
        int result = 0;
        for (int i = 0; i < points.length; i++) {
            Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
            int overlap = 0, line = 0;
            
            for (int j = i + 1; j < points.length; j++) {
                int x = points[i][0] - points[j][0];
                int y = points[i][1] - points[j][1];
                
                if (x == 0 && y == 0) {
                    overlap++;
                    continue;
                }
                
                int gcd = gcd(x, y);
                if (gcd != 0) {
                    x /= gcd;
                    y /= gcd;
                }
                
                map.putIfAbsent(x, new HashMap<>());
                map.get(x).put(y, map.get(x).getOrDefault(y, 0) + 1);
                
                line = Math.max(line, map.get(x).get(y));
            }
            result = Math.max(result, line + overlap + 1);
        }
        return result;
    }
    
    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}

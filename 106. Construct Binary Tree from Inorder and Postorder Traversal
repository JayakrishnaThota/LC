//O(n) time and space
class Solution {
    private Map<Integer, Integer> inorderMap;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }
        return helper(postorder, 0, postorder.length - 1, inorder, 0, inorder.length - 1);
    }

    private TreeNode helper(int[] postorder, int ps, int pe, int[] inorder, int is, int ie) {
        if (ps > pe || is > ie) return null;

        TreeNode root = new TreeNode(postorder[pe]);
        int offset = inorderMap.get(postorder[pe]);
        root.left = helper(postorder, ps, ps+offset-is-1, inorder, is, offset - 1);
        root.right = helper(postorder, ps+offset - is , pe - 1, inorder, offset + 1, ie);
        return root;
    }
}

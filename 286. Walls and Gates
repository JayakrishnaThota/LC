/*

You are given a m x n 2D grid initialized with these three possible values.

    -1 - A wall or an obstacle.
    0 - A gate.
    INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.

Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF

After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4



*/



//O(mn) time and space
class Solution {
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    public void wallsAndGates(int[][] rooms) {
        if(rooms==null || rooms.length==0) return;
        int m = rooms.length, n = rooms[0].length;
        Queue<int[]> queue = new LinkedList();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(rooms[i][j]==0){
                    queue.offer(new int[]{i,j});
                }
            }
        }
        while(!queue.isEmpty()){
            int[] temp = queue.poll();
            for(int[] dir:dirs){
                int x = temp[0] + dir[0];
                int y = temp[1] + dir[1];
                if(x<0 || x>=m || y<0 || y>=n || (rooms[x][y]==-1)) continue;
                if(rooms[x][y]>(rooms[temp[0]][temp[1]]+1)){
                    rooms[x][y] = 1 + rooms[temp[0]][temp[1]];
                    queue.offer(new int[]{x,y});
                }
            }
        }
    }
}

//O(n) time and space complexity
class Solution {
    
    int result = 0;
    Map<Integer, Integer> map;
    
    public int pathSum(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        map = new HashMap();
        for(int num:nums){
            int key = num/10;
            int value = num%10;
            map.put(key,value);
        }
        int rootid = nums[0]/10;
        dfs(rootid,0);
        return result;
    }
    
    public void dfs(int id, int sum){
        if(!map.containsKey(id)) return;
        sum+=map.get(id);
        int depth = id/10, pos = id%10;
        //Left = 2*root, right = 2*root+1
        int left = (depth + 1) * 10 + 2 * pos - 1;
        int right = left + 1;
        if(!map.containsKey(left)&&!map.containsKey(right)){
            result+=sum;
            return;
        }
        dfs(left,sum);
        dfs(right,sum);
    }
}

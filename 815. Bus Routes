//O(m^2*k) time and O(mk) space
// m = routes.length
// k = max of routes[i]
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    public int numBusesToDestination(int[][] routes, int source, int target) {
        construct(routes);
        return bfs(routes, source, target);

    }

    //O(mn) time and space
    private void construct(int[][] routes) {
        adjlist = new HashMap();
        for(int i=0;i<routes.length;i++) {
            int bus = i;
            for(int stop:routes[i]) {
                adjlist.putIfAbsent(stop, new HashSet());
                adjlist.get(stop).add(bus);
            }
        }
    }

    private int bfs(int[][] routes, int source, int target) {
        if(source==target) return 0;
        Queue<Integer> queue = new LinkedList();
        queue.offer(source);
        Set<Integer> visited = new HashSet();
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int u = queue.poll();
                if(adjlist.get(u)==null) continue;
                for(int bus:adjlist.get(u)) {
                    if(!visited.contains(bus)) {
                        visited.add(bus);
                        for(Integer v:routes[bus]) {
                            queue.offer(v);
                            if(v==target) return level+1;
                        }
                    }
                }
            }
            level++;
        }
        return -1;
    }
    
}

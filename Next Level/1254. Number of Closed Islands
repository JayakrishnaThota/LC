//O(mn) time and space
class Solution {
    public int closedIsland(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        int count = 0;
        for(int i=0;i<m;i++) {
            dfs(grid,i,0,m,n);
            dfs(grid,i,n-1,m,n);
        }
        for(int j=0;j<n;j++) {
            dfs(grid,0,j,m,n);
            dfs(grid,m-1,j,m,n);
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0) {
                    count++;
                    dfs(grid, i, j, m, n);
                }
            }
        }
        return count;
    }
    
    public void dfs(int[][] grid, int i, int j, int m, int n){
        if(i<0 || j<0 || (i>=m) || (j>=n) || grid[i][j]!=0) return;
        grid[i][j] = 2;
        dfs(grid,i+1,j,m,n);
        dfs(grid,i-1,j,m,n);
        dfs(grid,i,j+1,m,n);
        dfs(grid,i,j-1,m,n);
    }
}

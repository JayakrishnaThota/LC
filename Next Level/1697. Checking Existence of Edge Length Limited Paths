//O(eloge+qlogq) time and O(n) space
class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }
    
    public boolean[] distanceLimitedPathsExist(int n, int[][] edgeList, int[][] q) {
        if(edgeList==null || q==null || n<1) return null;
        int[][] queries = new int[q.length][4];
        for(int i = 0; i < q.length; i++) {
            queries[i][0] = q[i][0];
            queries[i][1] = q[i][1];
            queries[i][2] = q[i][2];
            queries[i][3] = i;
        }
        Arrays.sort(queries, (a,b)->(a[2]-b[2]));
        Arrays.sort(edgeList, (a,b)->(a[2]-b[2]));
        boolean[] result = new boolean[q.length];
        DisjointSet ds = new DisjointSet(n);
        int edgeListIndex = 0;
        for(int j = 0; j < q.length; j++) {
            while(edgeListIndex < edgeList.length && edgeList[edgeListIndex][2] < queries[j][2]) {
                ds.union(edgeList[edgeListIndex][0], edgeList[edgeListIndex][1]);
                edgeListIndex++;
            }
            result[queries[j][3]] = ds.find(queries[j][0]) == ds.find(queries[j][1]);
        }
        return result;
    }
}

//O(mnlogk) time and O(mn+k) space
class Solution {
    public int kthLargestValue(int[][] matrix, int k) {
        if(matrix==null || matrix.length==0) return 0;
        int m = matrix.length, n = matrix[0].length;
        int[][] dp = new int[m][n];
        PriorityQueue<Integer> pq = new PriorityQueue();
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                int a = (i-1>=0) ? dp[i-1][j] : 0;
                int b = (j-1>=0) ? dp[i][j-1] : 0;
                int c = ((i-1>=0) && (j-1>=0)) ? dp[i-1][j-1] : 0;
                dp[i][j] = a^b^c^matrix[i][j];
                pq.offer(dp[i][j]);
                if(pq.size()>k) pq.poll();
            }
        }
        return pq.peek();
    }
}

//O(mn) time and O(1) space
class Solution {
    int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};
    public int shortestPathBinaryMatrix(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        if(grid[0][0]==1 || grid[m-1][n-1]==1) {
            return -1;
        }
        Queue<int[]> queue = new LinkedList();
        boolean[][] visited = new boolean[m][n];
        queue.offer(new int[]{0,0});
        visited[0][0] = true;
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int k=0;k<size;k++){
                int[] cell = queue.poll();
                if((cell[0]==m-1) && (cell[1]==n-1)) return level+1;
                for(int[] dir:dirs){
                    int x = dir[0] + cell[0];
                    int y = dir[1] + cell[1];
                    if(x<0 || y<0 || x>=m || y>=n || visited[x][y] || grid[x][y]==1) continue;
                    queue.offer(new int[]{x,y});
                    visited[x][y] = true;
                }
            }
            level++;
        }
        return -1;
    }
}

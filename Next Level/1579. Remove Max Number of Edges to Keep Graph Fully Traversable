//O(e) time and O(n) space
class Solution {
    public int maxNumEdgesToRemove(int n, int[][] edges) {
        int[] parent1 = new int[n+1];
        int[] size1 = new int[n+1];
        int[] parent2 = new int[n+1];
        int[] size2 = new int[n+1];
        int n1 = n, n2 = n;
        for(int i=0;i<n;i++) {
            size1[i] = 1;
            parent1[i] = i;
            size2[i] = 1;
            parent2[i] = i;
        }
        Arrays.sort(edges, (a, b) -> (b[0] - a[0]));
        int res = 0;
        for(int[] edge:edges) {
            if(edge[0]==1) {
                int parentA = find(edge[1], parent1);
                int parentB = find(edge[2], parent1);
                int sizeA = size1[parentA];
                int sizeB = size1[parentB];
                if(parentA == parentB) {
                    res++;
                } else {
                    if(sizeA>sizeB) {
                        parent1[parentB] = parentA;
                        size1[parentA] += size1[parentB];
                    }
                    else {
                        parent1[parentA] = parentB;
                        size1[parentB] += size1[parentA];
                    }
                    n1--;
                }
            }
            else if(edge[0]==2) {
                int parentA = find(edge[1], parent2);
                int parentB = find(edge[2], parent2);
                int sizeA = size2[parentA];
                int sizeB = size2[parentB];
                if(parentA == parentB) {
                    res++;
                } else {
                    if(sizeA>sizeB) {
                        parent2[parentB] = parentA;
                        size2[parentA] += size2[parentB];
                    }
                    else {
                        parent2[parentA] = parentB;
                        size2[parentB] += size2[parentA];
                    }
                    n2--;
                }
            }
            else if(edge[0]==3) {
                int parentA1 = find(edge[1], parent1);
                int parentB1 = find(edge[2], parent1);
                int parentA2 = find(edge[1], parent2);
                int parentB2 = find(edge[2], parent2);
                int sizeA1 = size1[parentA1];
                int sizeB1 = size1[parentB1];
                int sizeA2 = size2[parentA2];
                int sizeB2 = size2[parentB2];
                if(parentA1 == parentB1 && parentA2==parentB2) {
                    res++;
                } else {
                    if(parentA1 != parentB1) {
                        if(sizeA1>sizeB1) {
                            parent1[parentB1] = parentA1;
                            size1[parentA1] += size1[parentB1];
                        }
                        else {
                            parent1[parentA1] = parentB1;
                            size1[parentB1] += size1[parentA1];
                        }
                        n1--;
                    }
                    if(parentA2 != parentB2) {
                        if(sizeA2>sizeB2) {
                            parent2[parentB2] = parentA2;
                            size2[parentA2] += size2[parentB2];
                        }
                        else {
                            parent2[parentA2] = parentB2;
                            size2[parentB2] += size2[parentA2];
                        }
                        n2--;
                    }
                }
            }
        }
        if(n1!=1 || n2!=1) return -1;
        return res;
    }
    
    //O(1) amortized
    public int find(int a, int[] parent) {
        if(a==parent[a]) return a;
        parent[a] = find(parent[a], parent);
        return parent[a];
    }

}

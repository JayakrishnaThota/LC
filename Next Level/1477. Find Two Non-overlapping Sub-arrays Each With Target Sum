//O(n) time and space
class Solution {
    public int minSumOfLengths(int[] arr, int target) {
        Map<Integer, Integer> map = new HashMap();
        map.put(0,-1);
        int sum = 0;
        for(int i=0;i<arr.length;i++) {
            sum+=arr[i];
            map.put(sum, i);
        }
        sum = 0;
        int lsize = Integer.MAX_VALUE, min = Integer.MAX_VALUE;
        for(int i=0;i<arr.length;i++) {
            sum+=arr[i];
            if(map.containsKey(sum-target)) {
                lsize = Math.min(lsize, i-map.get(sum-target));
            }
            if(map.containsKey(sum+target) && lsize!=Integer.MAX_VALUE) {
                min = Math.min(min, lsize+map.get(sum+target)-i);
            }
        }
        return (min==Integer.MAX_VALUE)?-1:min;
    }
}

class Solution {
    public int minFlips(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        Map<String, Integer> map = new HashMap();
        int result = dfs(mat, m, n, map, new HashSet());
        return (result==Integer.MAX_VALUE)?-1:result;
    }
    
    public int dfs(int[][] mat, int m, int n, Map<String, Integer> map, Set<String> set) {
        if(valid(mat, m, n)) return 0;
        String key = Arrays.deepToString(mat);
        if(map.containsKey(key)) return map.get(key);
        if(set.contains(key)) return Integer.MAX_VALUE;
        set.add(key);
        int min = Integer.MAX_VALUE;
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                flip(mat, i, j, m, n);
                int cur = dfs(mat, m, n, map, set);
                if(cur!=Integer.MAX_VALUE) min = Math.min(min, 1+cur);
                flip(mat, i, j, m, n);
            }
        }
        set.remove(key);
        map.put(key, min);
        return min;
    }
    
    public void flip(int[][] mat, int i, int j, int m, int n) {
        mat[i][j]^=1;
        if(i-1>=0) mat[i-1][j]^=1;
        if(j-1>=0) mat[i][j-1]^=1;
        if(i<m-1) mat[i+1][j]^=1;
        if(j<n-1) mat[i][j+1]^=1;
    }
    
    public boolean valid(int[][] mat, int n, int m){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(mat[i][j] == 1) return false;
            }
        }
        return true;
    }
    
}

//O(E+VlogV) time and O(V) space
class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public boolean union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return false;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
            return true;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }
    
    public List<List<Integer>> findCriticalAndPseudoCriticalEdges(int n, int[][] edges) {
        List<Integer>criticals = new ArrayList<>();
        List<Integer> pseduos = new ArrayList<>();
        Map<int[], Integer> map = new HashMap<>();
        for(int i =0;i<edges.length;i++){
            map.put(edges[i], i);
        }
        Arrays.sort(edges, (e1, e2)->Integer.compare(e1[2], e2[2]));
        int minCost = buildMST(n, edges, null, null);
        
        for(int i =0;i<edges.length;i++){
            int[] edge = edges[i];
            int index = map.get(edge);
            int costWithout = buildMST(n, edges, null, edge);
            if(costWithout > minCost){
                criticals.add(index);
            }else{
                int costWith = buildMST(n, edges, edge, null);
                if(costWith == minCost){
                    pseduos.add(index);
                }
            }
            
        }
        return Arrays.asList(criticals, pseduos);
    }
    
    private int buildMST(int n, int[][] edges, int[] pick, int[] skip){
        DisjointSet ds = new DisjointSet(n);
        int cost = 0;
        if(pick != null){
            ds.union(pick[0], pick[1]);
            cost += pick[2];
        }
        
        for(int[] edge : edges){
            if(edge != skip && ds.union(edge[0], edge[1])){
                cost += edge[2];
            }
        }
        return ds.size == 1? cost : Integer.MAX_VALUE;
    }
    
}

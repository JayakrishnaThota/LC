//O(4^mn) time and space
class Solution {
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    public int getMaximumGold(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        int max = 0;
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j]==0) continue;
                max = Math.max(max, dfs(grid,i,j,m,n));
            }
        }
        return max;
    }
    
    public int dfs(int[][] grid, int i, int j, int m, int n) {
        if(i<0 || j<0 || i>=m || j>=n || grid[i][j]==0) return 0;
        int max = 0, original = grid[i][j];
        grid[i][j] = 0;
        for(int[] dir:dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            max = Math.max(max, dfs(grid,x,y,m,n));
        }
        grid[i][j] = original;
        return grid[i][j]+max;
    }
    
}

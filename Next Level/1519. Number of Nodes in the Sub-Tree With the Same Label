//O(n) time and space
class Solution {
    int[] result;
    Map<Integer, Set<Integer>> adjlist;
    Set<Integer> set;
    public int[] countSubTrees(int n, int[][] edges, String labels) {
        construct(n, edges);
        helper(0, labels);
        return result;
    }
    
    public void construct(int n, int[][] edges) {
        result = new int[n];
        adjlist = new HashMap();
        set = new HashSet();
        for(int i=0;i<n;i++) {
            adjlist.put(i, new HashSet());
        }
        for(int[] edge:edges) {
            int u = edge[0], v = edge[1];
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
    }
    
    public int[] helper(int cur, String labels) {
        int[] freq = new int[26];
        if(set.add(cur)) {
            char c = labels.charAt(cur);
            for(int child:adjlist.getOrDefault(cur, Collections.emptySet())) {
                int[] next = helper(child, labels);
                for(int i=0;i<26;i++) {
                    freq[i] += next[i];
                }
            }
            ++freq[c-'a'];
            result[cur] = freq[c-'a'];
        }
        return freq;
    }
    
}

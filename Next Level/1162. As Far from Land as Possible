//O(mn) time and space
class Solution {
    public int maxDistance(int[][] grid) {
        int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        Queue<int[]> queue = new LinkedList();
        boolean[][] visited = new boolean[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    queue.offer(new int[]{i,j});
                    visited[i][j] = true;
                }
            }
        }
        int level = -1;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int[] temp = queue.poll();
                for(int[] dir:dirs){
                    int x = temp[0] + dir[0];
                    int y = temp[1] + dir[1];
                    if(x<0 || x>=m || y<0 || y>=n || (visited[x][y])) continue;
                    visited[x][y] = true;
                    queue.offer(new int[]{x,y});
                }
            }
            level++;
        }
        return level<=0 ? -1: level;
    }
}

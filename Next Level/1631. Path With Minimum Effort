//O(mn*logmn) time and O(mn) space
class Solution {
    public int minimumEffortPath(int[][] heights) {
        if(heights==null || heights.length==0) return 0;
        int m = heights.length, n = heights[0].length;
        int[][] distance = new int[m][n];
        for(int[] d:distance) {
            Arrays.fill(d, Integer.MAX_VALUE);
        }
        PriorityQueue<int[]> pq = new PriorityQueue(1, new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                return a[2]-b[2];
            }
        });
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        pq.offer(new int[]{0,0,0});
        while(!pq.isEmpty()) {
            int[] cell = pq.poll();
            int i = cell[0], j = cell[1], d = cell[2];
            if(distance[i][j]<d) continue;
            if(i==m-1 && j==n-1) return d;
            for(int[] dir:dirs) {
                int x = i + dir[0];
                int y = j + dir[1];
                if(x<0 || y<0 || x>=m || y>=n) continue;
                int newd = Math.max(d, Math.abs(heights[x][y]-heights[i][j]));
                if(distance[x][y]>newd) {
                    distance[x][y] = newd;
                    pq.offer(new int[]{x,y,newd});
                }
            }
        }
        return 0;
    }
}

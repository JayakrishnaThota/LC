//O(n) time and space
class Solution {
    public boolean checkEquivalence(Node root1, Node root2) {
        int[] map = new int[26];
        dfs(root1, map, 1, 1);
        dfs(root2, map, -1, 1);
        for(int m:map) if(m!=0) return false;
        return true;
    }
    
    public void dfs(Node root, int[] map, int add, int sign) {
        if(root==null) return;
        char c = root.val;
        if(c>='a' && c<='z') map[c-'a']+=(add*sign);
        dfs(root.left, map, add, sign);
        if(c=='-') sign = -1;
        dfs(root.right, map, add, sign);
    }
    
}

//O(V+E) time and space
class Solution {
    Map<Integer, Set<Integer>> redAdjlist;
    Map<Integer, Set<Integer>> blueAdjlist;
    int[][] distanceMap;
    public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges) {
        construct(n, red_edges, blue_edges);
        return bfs(0, n);
    }
    
    public void construct(int n, int[][] red_edges, int[][] blue_edges) {
        redAdjlist = new HashMap();
        blueAdjlist = new HashMap();
        distanceMap = new int[n][2];
        for(int i=0;i<n;i++) {
            redAdjlist.put(i, new HashSet());
            blueAdjlist.put(i, new HashSet());
        }
        for(int[] edge:red_edges) {
            int u = edge[0], v = edge[1];
            redAdjlist.get(u).add(v);
        }
        for(int[] edge:blue_edges) {
            int u = edge[0], v = edge[1];
            blueAdjlist.get(u).add(v);
        }
        for(int i=1;i<n;i++) {
            distanceMap[i][0] = 2*n;
            distanceMap[i][1] = 2*n;
        }
    }
    
    public int[] bfs(int source, int n) {
        int[] result = new int[n];
        Queue<int[]> queue = new LinkedList();
        queue.offer(new int[]{source,1});
        queue.offer(new int[]{source,-1});
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int[] cell = queue.poll();
                int u = cell[0], color = cell[1];
                if(color==1) {
                    if(blueAdjlist.get(u)==null) continue;
                    for(int v:blueAdjlist.get(u)) {
                        if(distanceMap[v][1]==2*n) {
                            distanceMap[v][1] = distanceMap[u][0]+1;
                            queue.offer(new int[]{v, -1});
                        }
                    }
                }
                else {
                    if(redAdjlist.get(u)==null) continue;
                    for(int v:redAdjlist.get(u)) {
                        if(distanceMap[v][0]==2*n) {
                            distanceMap[v][0] = distanceMap[u][1]+1;
                            queue.offer(new int[]{v, 1});
                        }
                    }
                }
            }
        }
        for(int i=1;i<n;i++) {
            int min = Math.min(distanceMap[i][0], distanceMap[i][1]);
            result[i] = (min==2*n)?-1:min;
        }
        return result;
    }
    
}

//O(n^2) time and O(n) space
class Solution {
    public int maxSumAfterPartitioning(int[] A, int K) {
        if(A==null || A.length==0) return 0;
        int n = A.length;
        int[] dp = new int[n];
        for(int i=0;i<n;i++) {
            int max = 0;
            for(int k=1;k<=K && i-k+1>=0;k++) {
                max = Math.max(max, A[i-k+1]);
                dp[i] = Math.max(dp[i], max*(k)+((i-k>=0)?dp[i-k]:0));
            }
        }
        return dp[n-1];
    }
}

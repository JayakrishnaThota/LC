//O(V+E) time and space
class Solution {
    
    class Node {
        int vertex;
        int distance;
        public Node(int vertex, int distance) {
            this.vertex = vertex;
            this.distance = distance;
        }
    }
    
    Map<Integer, Set<Integer>> adjlist;
    Map<Integer, Integer> distanceMap;
    public int treeDiameter(int[][] edges) {
        if(edges==null || edges.length==0) return 0;
        int n = edges.length;
        construct(edges);
        int longestDistanceVertex = bfs(0, n).vertex;
        return bfs(longestDistanceVertex, n).distance;
    }
    
    public void construct(int[][] edges) {
        adjlist = new HashMap();
        for(int[] edge:edges){
            int u = edge[0], v = edge[1];
            adjlist.putIfAbsent(u, new HashSet());
            adjlist.putIfAbsent(v, new HashSet());
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
    }
    
    public Node bfs(int source, int n) {
        distanceMap = new HashMap();
        for(int i=0;i<=n;i++){
            distanceMap.put(i, -1);
        }
        distanceMap.put(source,0);
        Queue<Integer> queue = new LinkedList();
        queue.offer(source);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int k=0;k<size;k++){
                int u = queue.poll();
                if(adjlist.get(u)==null) continue;
                for(int v:adjlist.get(u)){
                    int newDistance = distanceMap.get(u) + 1;
                    if(distanceMap.get(v)==-1){
                        distanceMap.put(v, newDistance);
                        queue.offer(v);
                    }
                }
            }
        }
        int max = Integer.MIN_VALUE, maxVertex = -1;
        for(int key:distanceMap.keySet()) {
            int val = distanceMap.get(key);
            if(val>max){
                max = val;
                maxVertex = key;
            }
        }
        return new Node(maxVertex, max);
    }
    
}

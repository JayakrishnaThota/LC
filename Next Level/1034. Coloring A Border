//O(mn) time and space
class Solution {
    public int[][] colorBorder(int[][] matrix, int r0, int c0, int color) {
        if(matrix==null || matrix.length==0) return matrix;
        int m = matrix.length, n = matrix[0].length;
        int original = matrix[r0][c0];
        dfs(matrix, r0, c0, m, n, original);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                matrix[i][j] = matrix[i][j] < 0 ? color : matrix[i][j];
            }
        }
        return matrix;
    }
    
    public void dfs(int[][] grid, int i, int j, int m, int n, int original){
        if(i<0 || j<0 || (i>=m) || (j>=n) || grid[i][j]!=original) return;
        grid[i][j] = -grid[i][j];
        dfs(grid,i+1,j,m,n,original);
        dfs(grid,i-1,j,m,n,original);
        dfs(grid,i,j+1,m,n,original);
        dfs(grid,i,j-1,m,n,original);
        if (i > 0 && i < m-1 && j > 0 && j < n - 1 && original == Math.abs(grid[i - 1][j]) &&
        (original == Math.abs(grid[i + 1][j])) && (original == Math.abs(grid[i][j+1])) && (original == Math.abs(grid[i][j-1])))
            grid[i][j] = -grid[i][j];
    }
    
}

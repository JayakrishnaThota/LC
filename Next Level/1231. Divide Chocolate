//O(n*log(sum-min)) time and O(1) space
class Solution {
    public int maximizeSweetness(int[] nums, int m) {
        long sum = 0;
        int min = Integer.MAX_VALUE;
        for(int num:nums) {
            sum+=num;
            min = Math.min(min, num);
        }
        long low = (long)min, high = sum;
        while(low<high) {
            long mid = low + (high-low)/2;
            if(!valid(nums, m+1, mid)) {
                low = mid+1;
            }
            else {
                high = mid;
            }
        }
        return (int)low;
    }
    
    public boolean valid(int[] nums, int m, long mid) {
        long sum = 0;
        int times = 1;
        for(int num:nums) {
            sum+=num;
            if(sum>mid) {
                sum = 0;//Only change from Split Array Largest Sum
                times++;
            }
        }
        return (times<=m);
    }
    
}

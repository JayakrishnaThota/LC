//O(mn) time and space
class Solution {
    
    class TrieNode {
        Map<Character, TrieNode> map;
        boolean isWord;
        public TrieNode() {
            map = new HashMap();
            isWord = false;
        }
    }
    
    public boolean search(TrieNode root, String s, int diff, int index) {
        if(diff>1) return false;
        if(index==s.length()) {
            return root.isWord && (diff==1);
        }
        Map<Character, TrieNode> map = root.map;
        for(char c:map.keySet()) {
            if(c==s.charAt(index)) {
                if(search(root.map.get(c), s, diff, index+1)) return true;
            } else {
                if(search(root.map.get(c), s, diff+1, index+1)) return true;
            }
        }
        return false;
    }
    
    public void insert(TrieNode root, String s) {
        for(char c:s.toCharArray()) {
            if(!root.map.containsKey(c)) {
                root.map.put(c, new TrieNode());
            }
            root = root.map.get(c);
        }
        root.isWord = true;
    }
    
    public TrieNode buildTrie(String[] dict) {
        TrieNode root = new TrieNode();
        for(String d:dict) {
            insert(root, d);
        }
        return root;
    }
    
    public boolean differByOne(String[] dict) {
        TrieNode root = buildTrie(dict);
        for(String d:dict) {
            if(search(root, d, 0, 0)) return true;
        }
        return false;
    }
}1554. Strings Differ by One Character

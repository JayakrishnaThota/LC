//O(n^3) time and O(n^2) space
class Solution {
    public List<Boolean> checkIfPrerequisite(int n, int[][] edges, int[][] queries) {
        boolean[][] dp = new boolean[n][n];
        for(int i=0;i<n;i++) {
            dp[i][i] = true;
        }
        for(int[] edge:edges) {
            int u = edge[0], v = edge[1];
            dp[u][v] = true;
        }
        for(int k=0;k<n;k++) {
            for(int i=0;i<n;i++) {
                for(int j=0;j<n;j++) {
                    dp[i][j] = dp[i][j] || dp[i][k]&&dp[k][j];
                }
            }
        }
        List<Boolean> result = new ArrayList();
        for(int[] query:queries) {
            int u = query[0], v = query[1];
            result.add(dp[u][v]);
        }
        return result;
    }
}

//O(n) time and space
class Solution {
    public int longestSubarray(int[] nums, int limit) {
        if(nums==null || nums.length==0) return 0;
        int n = nums.length, left = 0, right = 0;
        Deque<Integer> minDq = new ArrayDeque();
        Deque<Integer> maxDq = new ArrayDeque();
        for(;right<n;right++) {
            int num = nums[right];
            while(!minDq.isEmpty() && minDq.peekLast()>num) minDq.pollLast();
            while(!maxDq.isEmpty() && maxDq.peekLast()<num) maxDq.pollLast();
            minDq.offer(num);
            maxDq.offer(num);
            if(maxDq.peek()-minDq.peek()>limit) {
                if(nums[left]==minDq.peek()) minDq.poll();
                if(nums[left]==maxDq.peek()) maxDq.poll();
                left++;
            }
        }
        return right-left;
    }
}

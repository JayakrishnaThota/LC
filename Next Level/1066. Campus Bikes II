class Solution {
    public int assignBikes(int[][] workers, int[][] bikes) {
        Queue<Node> pq = new PriorityQueue<>(1,(a,b)->(a.cost-b.cost));
        Set<String> seen = new HashSet<>();
        pq.offer(new Node(0,0,0));
        while (!pq.isEmpty()){
            Node curr = pq.poll();
            String key = "$"+curr.worker+"$"+curr.mask;
            if (seen.contains(key))
                continue;
            seen.add(key);
            if (curr.worker == workers.length)
                return curr.cost;
            for(int j = 0; j < bikes.length; j++){
                if ( (curr.mask & (1<<j)) == 0){
                    pq.offer( new Node(curr.worker+1, curr.mask | (1 << j), 
                                       curr.cost + getDist(bikes[j], workers[curr.worker]) ));
                }
            }
        }
        return -1;
    }
    private int getDist(int[] bikepos,int[] wpos){
        return Math.abs(bikepos[0]-wpos[0]) + Math.abs(bikepos[1]-wpos[1]);
    }
    static class Node {
        int worker;
        int mask;
        int cost;
        public Node(int w,int m,int cost){
            this.worker = w;
            this.mask = m;
            this.cost = cost;
        }
    }
}

//Exponential time and space complexity
class Solution {
    public String findLexSmallestString(String s, int a, int b) {
        int n = s.length();
        Queue<String> queue = new LinkedList();
        Set<String> visited = new HashSet();
        queue.offer(s);
        visited.add(s);
        String res = s;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                String key = queue.poll();
                if(key.compareTo(res)<0) {
                    res = key;
                }
                char[] ch = key.toCharArray();
                for(int i=1;i<ch.length;i+=2) {
                    ch[i] = (char)((ch[i] - '0' + a) % 10 + '0');
                }
                String newKey = String.valueOf(ch);
                String rotatedKey = newKey.substring(n-b) + newKey.substring(0, n-b);
                if(visited.add(newKey)) {
                    queue.offer(newKey);
                }
                if(visited.add(rotatedKey)) {
                    queue.offer(rotatedKey);
                }
            }
        }
        return res;
    }
}

/*

Given a sorted array A of unique numbers, find the K-th missing number starting from the leftmost number of the array.

 

Example 1:

Input: A = [4,7,9,10], K = 1
Output: 5
Explanation: 
The first missing number is 5.

Example 2:

Input: A = [4,7,9,10], K = 3
Output: 8
Explanation: 
The missing numbers are [5,6,8,...], hence the third missing number is 8.

Example 3:

Input: A = [1,2,4], K = 3
Output: 6
Explanation: 
The missing numbers are [3,5,6,7,...], hence the third missing number is 6.

 

Note:

    1 <= A.length <= 50000
    1 <= A[i] <= 1e7
    1 <= K <= 1e8

*/


//O(logn) time and O(1) space
class Solution {
    public int missingElement(int[] nums, int k) {
        if(nums==null || nums.length==0) return k;
        int n = nums.length;
        int missingNumber = nums[n-1]-nums[0]+(1-n);
        int low = 0, high = n-1;
        if(missingNumber<k) return nums[n-1] + (k-missingNumber);
        while(low<high-1) {
            int mid = low + (high-low)/2;
            int missing = nums[mid] - nums[low] - (mid - low);
            if(k<=missing) {
                high = mid;
            }
            else {
                k-=missing;
                low = mid;
            }
        }
        return nums[low] + k;
    }
}

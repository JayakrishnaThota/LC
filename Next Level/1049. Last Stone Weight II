/*
    S1 + S2 = s
    S1 - S2 = d
    s-d = 2*S2
    d = s - 2*S2
    min(d) = max(S2)
*/
//O(n*sum) time and space
class Solution {
    public int lastStoneWeightII(int[] stones) {
        if(stones==null || stones.length==0) return 0;
        int n = stones.length, sum = 0, S2 = 0;
        for(int s:stones) sum+=s;
        boolean[][] dp = new boolean[n+1][sum/2+1];
        for(int i=0;i<=n;i++) dp[i][0] = true;
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=sum/2;j++) {
                if(j-stones[i-1]>=0) {
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-stones[i-1]];
                } else {
                    dp[i][j] = dp[i-1][j];
                }
                if(dp[i][j]) {
                    S2 = Math.max(S2, j);
                }
            }
        }
        return sum - 2*S2;
    }
}

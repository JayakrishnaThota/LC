//O(n) time and space
class Solution {
    int max = 0;
    public int maxSumBST(TreeNode root) {
        dfs(root);
        return max;
    }
    
    public int[] dfs(TreeNode root) {
        if(root==null) return new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE, 0};
        int[] left = dfs(root.left);
        int[] right = dfs(root.right);
        if(!(left!=null && right!=null && left[1]<root.val && right[0]>root.val)) return null;
        int sum = root.val + left[2] + right[2];
        max = Math.max(max, sum);
        return new int[]{Math.min(root.val, left[0]), Math.max(root.val, right[1]), sum};
    }
    
}

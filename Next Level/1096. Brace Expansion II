//O(2^n*n) time and space
class Solution {
    public List<String> braceExpansionII(String expression) {
        Queue<String> queue = new LinkedList();
        Set<String> set = new HashSet();
        queue.offer(expression);
        while(!queue.isEmpty()) {
            String key = queue.poll();
            if(key.indexOf('{')==-1) {
                set.add(key);
                continue;
            }
            int l = 0, r = 0, index = 0;
            while(key.charAt(index)!='}') {
                if(key.charAt(index)=='{') l = index;
                index++;
            }
            r = index;
            String left = key.substring(0,l);
            String right = key.substring(r+1, key.length());
            String[] strs = key.substring(l+1, r).split(",");
            StringBuilder sb = new StringBuilder();
            for(String s:strs) {
                sb.setLength(0);
                queue.offer(sb.append(left).append(s).append(right).toString());
            }
        }
        List<String> result = new ArrayList(set);
        Collections.sort(result);
        return result;
    }
}

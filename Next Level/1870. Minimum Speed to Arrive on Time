//O(nlog(max-min)) time and O(1) space
class Solution {
    
    public int minSpeedOnTime(int[] dist, double hour) {
        int mod = (int)Math.pow(10, 7);
        int low = 1, high = mod+1;
        while(low<high) {
            int mid = low + (high-low)/2;
            if(!canTravel(dist, hour, mid)) {
                low = mid+1;
            } else {
                high = mid;
            }
        }
        return (high>mod)?-1:low;
    }
    
    public boolean canTravel(int[] dist, double hour, int speed) {
        double sum = 0;
        for(int i=0;i<dist.length;i++) {
            sum = Math.ceil(sum);
            int d = dist[i];
            sum += (double)d/(double)speed;
        }
        return (sum<=hour);
    }
    
}

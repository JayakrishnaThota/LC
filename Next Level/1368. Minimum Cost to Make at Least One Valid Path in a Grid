//O(mn) time and space
class Solution {
    int INF = (int) 1e9;
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    public int minCost(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int[] d:dp) Arrays.fill(d, INF);
        Queue<int[]> queue = new LinkedList();
        int cost = 0;
        dfs(grid,0,0,m,n,cost,dp,queue);
        while(!queue.isEmpty()) {
            int size = queue.size();
            cost++;
            for(int k=0;k<size;k++) {
                int[] cell = queue.poll();
                int i = cell[0], j = cell[1];
                for(int[] dir:dirs) {
                    int x = dir[0] + i;
                    int y = dir[1] + j;
                    dfs(grid,x,y,m,n,cost,dp,queue);
                }
            }
        }
        return dp[m-1][n-1];
    }
    
    public void dfs(int[][] grid, int i, int j, int m, int n, int cost, int[][] dp, Queue<int[]> queue) {
        if(i<0 || j<0 || i>=m || j>=n || dp[i][j]!=INF) return;
        queue.offer(new int[]{i,j});
        dp[i][j] = cost;
        int dir = grid[i][j];
        if(dir==1) j+=1;
        if(dir==2) j-=1;
        if(dir==3) i+=1;
        if(dir==4) i-=1;
        dfs(grid,i,j,m,n,cost,dp,queue);
    }
    
}

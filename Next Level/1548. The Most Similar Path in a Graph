//O(E+Vlogv) time and O(V+E) space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    int[][] distance;
    int[][] path;
    PriorityQueue<int[]> pq;
    public List<Integer> mostSimilar(int n, int[][] roads, String[] names, String[] targetPath) {
        construct(n, roads, names, targetPath);
        return dijkstras(n, roads, names, targetPath);
    }
    
    public void construct(int n, int[][] pre, String[] names, String[] targetPath){
        int m = targetPath.length;
        distance = new int[n][m];
        path = new int[n][m];
        adjlist = new HashMap();
        pq = new PriorityQueue(1, new Comparator<int[]>(){
           public int compare(int[] a, int[] b) {
               int d1 = distance[a[0]][a[1]];
               int d2 = distance[b[0]][b[1]];
               if(d1!=d2) {
                   return d1-d2;
               }
               return b[1]-a[1];
           } 
        });
        for(int[] p:pre){
            int u = p[0];
            int v = p[1];
            adjlist.putIfAbsent(u, new HashSet());
            adjlist.putIfAbsent(v, new HashSet());
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
        for(int i=0;i<n;i++) {
            distance[i][0] = targetPath[0].equals(names[i])?0:1;
            pq.offer(new int[]{i,0});
            for(int j=1;j<m;j++) {
                distance[i][j] = Integer.MAX_VALUE;
            }
        }
    }
    
    public List<Integer> dijkstras(int n, int[][] roads, String[] names, String[] targetPath) {
        int m = targetPath.length;
        while(!pq.isEmpty()) {
            int[] cell = pq.poll();
            int ur = cell[0], ut = cell[1];
            int curDistance = distance[ur][ut];
            if(ut==targetPath.length-1) break;
            for(int vr:adjlist.get(ur)) {
                int newDistance = curDistance + ((targetPath[ut+1].equals(names[vr]))?0:1);
                if(distance[vr][ut+1]>newDistance) {
                    distance[vr][ut+1] = newDistance;
                    pq.offer(new int[]{vr, ut+1});
                    path[vr][ut+1] = ur;
                } 
            }
        }
        int last = 0;
        for(int i = 1; i < n; i++) {
            if (distance[i][m-1] < distance[last][m-1]) last = i;
        }
        
        LinkedList<Integer> ans = new LinkedList<>();
        for(int i = m-1; i >= 0; i--) {
            ans.push(last);
            last = path[last][i];
        }
        return ans;
    }
    
}

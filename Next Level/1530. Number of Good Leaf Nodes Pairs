//O(n) time and space
class Solution {
    Map<TreeNode, Set<TreeNode>> adjlist;
    List<TreeNode> leaves;
    int result;
    public int countPairs(TreeNode root, int distance) {
        adjlist = new HashMap();
        leaves = new ArrayList();
        result = 0;
        construct(root, null);
        for(TreeNode node:adjlist.keySet()) {
            if(adjlist.get(node).size()==1) {
                leaves.add(node);
            }
        }
        leaves.remove(root);
        for(TreeNode leaf:leaves) {
            bfs(leaf, distance);
        }
        return result/2;
    }
    
    public void bfs(TreeNode root, int distance) {
        Queue<TreeNode> queue = new LinkedList();
        Set<TreeNode> visited = new HashSet();
        queue.offer(root);
        visited.add(root);
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i=0;i<size;i++) {
                TreeNode u = queue.poll();
                for(TreeNode v:adjlist.get(u)) {
                    if(visited.contains(v)) continue;
                    visited.add(v);
                    queue.offer(v);
                    if(leaves.contains(v)) result++;
                }
            }
            level++;
            if(level==distance) break;
        }
    }
    
    public void construct(TreeNode root, TreeNode parent) {
        if(root==null) return;
        adjlist.putIfAbsent(root, new HashSet());
        if(parent!=null) {
            adjlist.get(root).add(parent);
            adjlist.get(parent).add(root);
        }
        construct(root.left, root);
        construct(root.right, root);
    }
    
}

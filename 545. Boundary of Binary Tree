//O(n) time and space
class Solution {
    List<Integer> list;
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        list = new ArrayList();
        if(root==null) return list;
        list.add(root.val);
        printLeft(root.left);
        printLeaves(root.left);
        printLeaves(root.right);
        printRight(root.right);
        return list;
    }
    
    public void printLeft(TreeNode root){
        if(root==null) return;
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0;i<size;i++){
                TreeNode temp = queue.poll();
                if(isLeaf(temp)) continue;
                if(i==0){
                    list.add(temp.val);
                    if(temp.left!=null) queue.offer(temp.left);
                    if(temp.right!=null) queue.offer(temp.right);
                }
            }
        }
    }
    
    public void printLeaves(TreeNode root){
        if(root==null) return;
        if(isLeaf(root)) { list.add(root.val); return; }
        printLeaves(root.left);
        printLeaves(root.right);
    }
    
    
    public void printRight(TreeNode root){
        if(root==null) return;
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        List<Integer> sublist = new ArrayList();
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0;i<size;i++){
                TreeNode temp = queue.poll();
                if(isLeaf(temp)) continue;
                if(i==size-1) {
                    sublist.add(temp.val);
                    if(temp.left!=null) queue.offer(temp.left);
                    if(temp.right!=null) queue.offer(temp.right);
                }
            }
        }
        for(int i=sublist.size()-1;i>=0;i--) list.add(sublist.get(i));
    }
    
    public boolean isLeaf(TreeNode root){
        return ((root.left==null)&&(root.right==null));
    }
}

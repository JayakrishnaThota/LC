//O(n) time and space
class Solution {
    
    public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {
        List<Integer> result = new ArrayList();
        if(pid==null || ppid==null) return result;
        Map<Integer,List<Integer>> adjlist = new HashMap();
        initialise(adjlist, pid, ppid);
        dfs(result,kill,adjlist);
        return result;
    }
    
    public void dfs(List<Integer> result, int kill, Map<Integer, List<Integer>> adjlist){
        Stack<Integer> stack = new Stack();
        stack.push(kill);
        while(!stack.isEmpty()){
            int parent = stack.pop();
            result.add(parent);
            if(adjlist.get(parent)==null) continue;
            for(int child:adjlist.get(parent)){
                stack.push(child);
            }
        }
    }
    
    public void initialise(Map<Integer, List<Integer>> adjlist, List<Integer> pid, List<Integer> ppid){
        for(int i=0;i<pid.size();i++){
            int parent = pid.get(i);
            int child = ppid.get(i);
            if(adjlist.get(child)==null) adjlist.put(child, new ArrayList());
            adjlist.get(child).add(parent);
        }
    }
    
}

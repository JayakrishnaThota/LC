//O(2^n) time and space
class Solution {
    Map<Integer, List<TreeNode>> map = new HashMap();
    public List<TreeNode> allPossibleFBT(int n) {
        List<TreeNode> result = new ArrayList();
        if(n==0) {
            return result;
        }
        if(n==1) {
            result.add(new TreeNode(0));
            return result;
        }
        if(map.containsKey(n)) {
            return map.get(n);
        }
        for(int i=1;i<n;i+=2) {
            List<TreeNode> left = allPossibleFBT(i);
            List<TreeNode> right = allPossibleFBT(n-1-i);
            for(TreeNode l:left) {
                for(TreeNode r:right) {
                    TreeNode root = new TreeNode(0);
                    root.left = l;
                    root.right = r;
                    result.add(root);
                }
            }
        }
        map.put(n+1, result);
        return result;
    }
}

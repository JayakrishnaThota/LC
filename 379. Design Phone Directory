/* Design a Phone Directory which supports the following operations:

get: Provide a number which is not assigned to anyone.
check: Check if a number is available or not.
release: Recycle or release a number.
Example:

// Init a phone directory containing a total of 3 numbers: 0, 1, and 2.
PhoneDirectory directory = new PhoneDirectory(3);

// It can return any available phone number. Here we assume it returns 0.
directory.get();

// Assume it returns 1.
directory.get();

// The number 2 is available, so return true.
directory.check(2);

// It returns 2, the only number that is left.
directory.get();

// The number 2 is no longer available, so return false.
directory.check(2);

// Release number 2 back to the pool.
directory.release(2);

// Number 2 is available again, return true.
directory.check(2); */

class PhoneDirectory {

    Queue<Integer> queue;
    Set<Integer> set;
    int max;
    public PhoneDirectory(int maxNumbers) {
        queue = new LinkedList();
        set = new HashSet();
        max = maxNumbers;
        for(int i=0;i<max;i++) {
            queue.add(i);
        }
    }
    
    //O(1) time and O(1) space
    public int get() {
        if(queue.isEmpty()) return -1;
        int ret = queue.poll();
        set.add(ret);
        return ret;
    }
    
    //O(1) time and O(1) space
    public boolean check(int number) {
        if(number<0 || number>=max) return false;
        return !set.contains(number);
    }
    
    //O(1) time and O(1) space
    public void release(int number) {
        if(set.remove(number)) {
            queue.offer(number);
        }
    }
}

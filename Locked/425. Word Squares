//DFS
class Solution {
    public List<List<String>> wordSquares(String[] words) {
        List<List<String>> list = new ArrayList();
        for(int i=0;i<words.length;i++){
            List<String> sublist = new ArrayList(); 
            backtrack(list, sublist, words, i, new boolean[words.length], 0);
        }
        return list;
    }
    public void backtrack(List<List<String>> list, List<String> sublist, String[] words, int index, boolean[] visited, int row){
        sublist.add(words[index]);
        visited[index] = true;
        row++;
        if(words[0].length()==row){
            list.add(new ArrayList(sublist));
            return;
        }
        for(int i=0;i<words.length;i++){
            String word = words[i];
            for(int j=0;j<sublist.size();j++){
                if(word.charAt(j)!=sublist.get(j).charAt(row)) break;
                if(j==sublist.size()-1){
                    System.out.println(word+" is added");
                    backtrack(list, sublist, words, i, visited, row);
                    System.out.println(word+" is removed");
                    sublist.remove(sublist.size()-1);
                }
            }
        }
    }
}

//DFS + Trie
class Solution {
    class TrieNode {
        List<String> prefixes;
        TrieNode[] children;
        
        TrieNode()
        {
            prefixes = new ArrayList();
            children = new TrieNode[26];
        }
        
        public void addWord(String word)
        {
            TrieNode node = root;
            for(char ch: word.toCharArray())
            {
                if(node.children[ch-'a'] == null)
                {
                    node.children[ch-'a'] = new TrieNode();
                }
                node.children[ch-'a'].prefixes.add(word);
                node = node.children[ch-'a'];
            }
        }
        
        public List<String> getPrefixes(String word)
        {
            TrieNode node = root;
            List<String> res = new ArrayList();
            for(char ch: word.toCharArray())
            {
                if(node.children[ch-'a'] == null)
                    return res;
                
                node = node.children[ch-'a'];
            }
            return node.prefixes;
        }
    }
    
    TrieNode root;
    public List<List<String>> wordSquares(String[] words) {
        List<List<String>> res = new ArrayList();
        if(words == null || words.length == 0)
            return res;
        
        root = new TrieNode();
        for(String word: words)
        {
            TrieNode node = root;
            root.addWord(word);
        }
        
        for(String word: words)
        {
            helper(res, word, new ArrayList());
        }
        return res;
    }
    
    private void helper(List<List<String>> res, String word, List<String> subList)
    {
        subList.add(word);
        if(subList.size() == word.length())
        {
            res.add(new ArrayList(subList));
            subList.remove(subList.size()-1);
            return;
        }
        
        if(word.length() < subList.size()+1)
            return;
        
        StringBuilder preStr = new StringBuilder();
        
        for(String str: subList)
        {
            preStr.append(str.charAt(subList.size()));
        }
        
        List<String> prefixes = root.getPrefixes(preStr.toString());
        
        for(String prefix: prefixes)
        {
            helper(res, prefix, subList);
        }
        subList.remove(subList.size()-1);
    }
}

class MaxStack {
    
    class DLNode {
        
        DLNode pre, post;
        int val;
        
        public DLNode() {
            
        }
        
        public DLNode(int val)
        {
            this.val = val;
        }
        
    }
    
    
    DLNode head, tail;
    TreeMap<Integer, List<DLNode>> map;
    
    public MaxStack() {
        head = new DLNode();
        tail = new DLNode();
        head.post = tail;
        tail.pre = head;
        map = new TreeMap();
    }
    
    //O(logn) time and O(1) space
    public void push(int x) {
        DLNode node = new DLNode(x);
        insertAtHead(node);
        map.putIfAbsent(x, new ArrayList());
        map.get(x).add(node);
    }
    
    public void insertAtHead(DLNode node) {
        node.post = head.post;
        node.pre = head;
        head.post.pre = node;
        head.post = node;
    }
    
    //O(logn) time and O(1) space
    public int pop() {
        DLNode node = removeFromHead();
        List<DLNode> list = map.get(node.val);
        list.remove(list.size()-1);
        if(list.isEmpty()) map.remove(node.val);
        return node.val;
    }
    
    public DLNode removeFromHead() {
        if(isEmpty()) return null;
        DLNode node = head.post;
        remove(node);
        return node;
    }
    
    public void remove(DLNode node) {
        node.pre.post = node.post;
        node.post.pre = node.pre;
    }
    
    //O(1) time and O(1) space
    public int top() {
        if(isEmpty()) return -1;
        return head.post.val;
    }
    
    //O(1) time and O(1) space
    public int peekMax() {
        if(isEmpty()) return -1;
        return map.lastKey();
    }
    
    //O(logn) time and O(1) space
    public int popMax() {
        int max = peekMax();
        DLNode node = map.get(max).get(map.get(max).size()-1);
        List<DLNode> list = map.get(node.val);
        list.remove(list.size()-1);
        if(list.isEmpty()) map.remove(max);
        remove(node);
        return max;
    }
    
    //O(1) time and O(1) space
    public boolean isEmpty() {
        return (head.post == tail);
    }
}

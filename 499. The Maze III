//O(mn*log(mn)) time and O(mn) space
class Solution {
    class Point implements Comparable<Point> {
        int x;
        int y;
        int dis;  // distance from ball
        String path;  // directions from ball
        Point(int x, int y, int dis, String path) {
            this.x = x;
            this.y = y;
            this.dis = dis;
            this.path = path;
        }
        // if both ways have shortest distance, they should be ordered lexicographically
        public int compareTo(Point point) {
            return this.dis == point.dis ? this.path.compareTo(point.path) : this.dis - point.dis;
        }
    }

    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {
        int m = maze.length, n = maze[0].length;
        boolean[][] visited = new boolean[m][n];

        PriorityQueue<Point> pq = new PriorityQueue<>();
        pq.offer(new Point(ball[0], ball[1], 0, ""));

        // arrays used for exploring 4 directions from a point
        char[] dstr = {'u', 'd', 'l', 'r'};
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        while (!pq.isEmpty()) {
            Point position = pq.poll();
            if (position.x == hole[0] && position.y == hole[1]) {
                return position.path;
            }
            visited[position.x][position.y] = true;
            for (int i = 0; i < dirs.length; i++) {
                int x = position.x;
                int y = position.y;
                int dis = position.dis;
                String path = position.path;

                // Explore current direction until hitting a wall or the hole
                while (x+dirs[i][0] >= 0 && x+dirs[i][0] < m && y+dirs[i][1] >= 0 && y+dirs[i][1] < n && maze[x+dirs[i][0]][y+dirs[i][1]] == 0) {
                        x += dirs[i][0];
                        y += dirs[i][1];
                        dis += 1;
                         if (x == hole[0] && y == hole[1]) {
                            break;
                        }
                    }
                    if (!visited[x][y]) {
                        pq.offer(new Point(x, y, dis, path + dstr[i]));
                    }
            }
        }

        return "impossible";
    }
}

//Exponential time and space complexity
class Solution {
    Map<String, List<TreeNode>> map;
    public List<TreeNode> generateTrees(int n) {
        if(n<1) return new ArrayList<>();
        map = new HashMap();
        return helper(1, n);
    }

    private List<TreeNode> helper(int low, int high) {
        String key = low+","+high;
        if(map.containsKey(key)) return map.get(key);
        List<TreeNode> result = new ArrayList();
        if(low>high) {
            result.add(null);
            return result;
        }
        if(low==high) {
            result.add(new TreeNode(low));
            return result;
        }
        for(int root=low;root<=high;root++) {
            List<TreeNode> leftSubTrees = helper(low, root-1);
            List<TreeNode> rightSubTrees = helper(root+1, high);
            for(TreeNode left:leftSubTrees) {
                for(TreeNode right:rightSubTrees) {
                    TreeNode node = new TreeNode(root);
                    node.left = left;
                    node.right = right;
                    result.add(node);
                }
            }
        }
        map.put(key, result);
        return result;
    }
}

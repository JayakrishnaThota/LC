class Solution {
    
    class Tuple{
        int x;
        int y;
        int val;
        public Tuple(int x, int y, int val){
            this.x = x;
            this.y = y;
            this.val = val;
        }
    }
    
    //O(mlogn) time and O(n) space
    public int kthSmallest(int[][] matrix, int k) {
        if(matrix==null || matrix.length==0 || k<1) return -1;
        int m = matrix.length, n = matrix[0].length;
        PriorityQueue<Tuple> pq = new PriorityQueue<Tuple>(new Comparator<Tuple>(){
           public int compare(Tuple a, Tuple b){
               return a.val - b.val;
           } 
        });
        for(int i=0;i<n;i++){
            pq.offer(new Tuple(0, i, matrix[0][i]));
        }
        while(!pq.isEmpty()){
            Tuple t = pq.poll();
            k--;
            if(0==k) return t.val;
            if(t.x==m-1) continue;
            pq.offer(new Tuple(t.x+1, t.y, matrix[t.x+1][t.y]));
        }
        return -1;
    }
}

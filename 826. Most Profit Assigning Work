//O(nlogn) time and O(n) space
class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
        TreeMap<Integer, Integer> tmap = new TreeMap();
        for(int i=0;i<difficulty.length;i++) {
            tmap.put(difficulty[i], Math.max(profit[i], tmap.getOrDefault(difficulty[i],0)));
        }
        int res = 0, max = 0;
        for(Integer key:tmap.keySet()) {
            max = Math.max(max, tmap.get(key));
            tmap.put(key, max);
        }
        for(int i=0;i<worker.length;i++) {
            int work = worker[i];
            Integer floor = tmap.floorKey(work);
            if(floor==null) continue;
            res+=tmap.get(floor);
        }
        return res;
    }
}

/*

Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example:

Input: nums = [-2,0,1,3], and target = 2
Output: 2 
Explanation: Because there are two triplets which sums are less than 2:
             [-2,0,1]
             [-2,0,3]

Follow up: Could you solve it in O(n2) runtime?


*/

//O(n2) time and O(1) space solution
class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if(nums==null || nums.length<3) return 0;
        Arrays.sort(nums);
        int result = 0;
        for(int i=0;i<nums.length-2;i++){
            int low = i+1 , high = nums.length-1;
            while(low<high){
                int sum = nums[i]+nums[low]+nums[high];
                if(sum<target){
                    result+=high-low;
                    low++;
                }
                else{
                    high--;
                }
            }
        }
        return result;
    }
}

//O(VE) time and O(V+E) space
class Solution {
    Map<String, Set<String>> adjlist;
    public boolean areSentencesSimilarTwo(String[] words1, String[] words2, List<List<String>> pairs) {
        construct(pairs);
        if(words1.length!=words2.length) return false;
        for(int i=0;i<words1.length;i++) {
            if(words1[i].equals(words2[i])) continue;
            if(!bfs(words1[i], words2[i])) return false;
        }
        return true;
    }
    
    public void construct(List<List<String>> pairs) {
        adjlist = new HashMap();
        for(List<String> pair:pairs) {
            String u = pair.get(0), v = pair.get(1);
            adjlist.putIfAbsent(u, new HashSet());
            adjlist.putIfAbsent(v, new HashSet());
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
    }   
    
    public boolean bfs(String s, String t) {
        Set<String> set = new HashSet();
        Queue<String> queue = new LinkedList();
        queue.offer(s);
        set.add(s);
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                String u = queue.poll();
                if(adjlist.get(u)==null) continue;
                for(String v:adjlist.get(u)) {
                    if(v.equals(t)) return true;
                    if(set.add(v)) {
                        queue.offer(v);
                    }
                }
            }
        }
        return false;
    }
    
}

//O(VE) time and O(V+E) space
class Solution {
    Map<String, Set<String>> adjlist;
    public boolean areSentencesSimilarTwo(String[] words1, String[] words2, List<List<String>> pairs) {
        construct(pairs);
        if(words1.length!=words2.length) return false;
        for(int i=0;i<words1.length;i++) {
            if(words1[i].equals(words2[i])) continue;
            if(!dfs(words1[i], words2[i])) return false;
        }
        return true;
    }
    
    public void construct(List<List<String>> pairs) {
        adjlist = new HashMap();
        for(List<String> pair:pairs) {
            String u = pair.get(0), v = pair.get(1);
            adjlist.putIfAbsent(u, new HashSet());
            adjlist.putIfAbsent(v, new HashSet());
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
    }   
    
    public boolean dfs(String s, String t) {
        Set<String> set = new HashSet();
        Stack<String> stack = new Stack();
        stack.push(s);
        set.add(s);
        while(!stack.isEmpty()) {
            String u = stack.pop();
            if(adjlist.get(u)==null) continue;
            for(String v:adjlist.get(u)) {
                if(v.equals(t)) return true;
                if(set.add(v)) {
                    stack.push(v);
                }
            }
        }
        return false;
    }
    
}

//O(V+E) time and space
class Solution {

    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }

    public boolean areSentencesSimilarTwo(String[] words1, String[] words2, List<List<String>> pairs) {
        if(words1.length!=words2.length) return false;
        Map<String, Integer> map = new HashMap();
        int index = 0;
        for(List<String> pair:pairs) {
            String u = pair.get(0), v = pair.get(1);
            if(!map.containsKey(u)) map.put(u, index++);
            if(!map.containsKey(v)) map.put(v, index++);
            
        }
        DisjointSet ds = new DisjointSet(map.size());
        for(List<String> pair:pairs) {
            String u = pair.get(0), v = pair.get(1);
            int a = map.get(u), b = map.get(v);
            ds.union(a,b);
        }
        for(int i=0;i<words1.length;i++) {
            String a = words1[i], b = words2[i];
            if(a.equals(b)) continue;
            if(!map.containsKey(a) || !map.containsKey(b)) return false;
            if(ds.find(map.get(a))!=ds.find(map.get(b))) return false;
        }
        return true;
    }
    
}

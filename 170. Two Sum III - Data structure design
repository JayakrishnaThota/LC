class TwoSum {

    Map<Integer, Integer> map;
    public TwoSum() {
        map = new HashMap();
    }
    
    //O(1) time and space
    public void add(int number) {
        map.put(number, map.getOrDefault(number,0)+1);
    }
    
    //O(n) time and O(1) space
    public boolean find(int value) {
        for(int key:map.keySet()) {
            if(key==value-key) {
                if(map.get(key)>1) return true;
            }
            else {
                if(map.containsKey(value-key)) return true;
            }
        }
        return false;
    }
}


class TwoSum {

    Set<Integer> set;
    Set<Integer> sum;
    public TwoSum() {
        set = new HashSet();
        sum = new HashSet();
    }
    
    //O(n) time and space
    public void add(int number) {
        if(set.contains(number)) {
            sum.add(number*2);
        }
        else {
            for(int s:set) {
                sum.add(iter.next()+number);
            } 
        }
        set.add(number);
    }
    
    //O(1) time and O(1) space
    public boolean find(int value) {
        return sum.contains(value);
    }
}

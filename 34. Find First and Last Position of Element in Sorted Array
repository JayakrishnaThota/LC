//O(logn) time and O(1) space
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums==null || nums.length==0) return new int[]{-1,-1};
        int[] res = new int[2];
        res[0] = findFirst(nums, target);
        res[1] = findLast(nums, target);
        return res;
    }

    private int findFirst(int[] nums, int target) {
        int n = nums.length;
        int low = 0, high = n-1;
        while(low<high) {
            int mid = low + (high-low)/2;
            if(nums[mid]<target) {
                low = mid+1;
            } else {
                high = mid;
            }
        }
        return (nums[low]==target) ? low : -1;
    }

    private int findLast(int[] nums, int target) {
        int n = nums.length;
        int low = 0, high = n-1;
        while(low<high) {
            int mid = (low + (high-low)/2) + 1;
            if(nums[mid]>target) {
                high = mid-1;
            } else {
                low = mid;
            }
        }
        return (nums[high]==target) ? high : -1;
    }
}

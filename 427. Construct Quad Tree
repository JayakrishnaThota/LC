//O(mn*log(mn)) time and O(log(mn)) space
class Solution {
    public Node construct(int[][] grid) {
        if(grid==null || grid.length==0) return null;
        return helper(grid, 0, grid.length-1, 0, grid[0].length-1);
    }
    
    public Node helper(int[][] grid, int rs, int re, int cs, int ce) {
        if(rs>re || cs>ce) return null;
        int count = 0;
        for(int i=rs;i<=re;i++) {
            for(int j=cs;j<=ce;j++) {
                if(grid[i][j]==1) {
                    count++;
                }
            }
        }
        if(count==(re-rs+1)*(ce-cs+1)) return new Node(true, true, null, null, null, null);
        if(count==0) return new Node(false, true, null, null, null, null);
        Node root = new Node();
        root.val = false;
        root.isLeaf = false;
        root.topLeft = helper(grid, rs, (rs+re)/2, cs, (cs+ce)/2);
        root.topRight = helper(grid, rs, (rs+re)/2, (cs+ce)/2 + 1, ce);
        root.bottomLeft = helper(grid, (rs+re)/2 + 1, re, cs, (cs+ce)/2);
        root.bottomRight = helper(grid, (rs+re)/2 + 1, re,  (cs+ce)/2 + 1, ce);
        return root;
        
    }
    
}

//O(mn) time and O(log(mn)) space
class Solution {
    public Node construct(int[][] grid) {
        if(grid==null || grid.length==0) return null;
        return helper(grid, 0, grid.length-1, 0, grid[0].length-1);
    }
    
    public Node helper(int[][] grid, int rs, int re, int cs, int ce) {
        if(rs>re || cs>ce) return null;
        if(re == rs && ce == cs) {
            return new Node(grid[rs][cs] != 0, true, null, null, null, null);
        }
        Node topLeft = helper(grid, rs, (rs+re)/2, cs, (cs+ce)/2);
        Node topRight = helper(grid, rs, (rs+re)/2, (cs+ce)/2 + 1, ce);
        Node bottomLeft = helper(grid, (rs+re)/2 + 1, re, cs, (cs+ce)/2);
        Node bottomRight = helper(grid, (rs+re)/2 + 1, re,  (cs+ce)/2 + 1, ce);
        if(topLeft.isLeaf && topRight.isLeaf && bottomLeft.isLeaf && bottomRight.isLeaf) {
            if(topLeft.val==topRight.val && topRight.val==bottomLeft.val && bottomLeft.val==bottomRight.val) {
                return new Node(topLeft.val, true, null, null, null, null);
            }
        }
        return new Node(false, false, topLeft, topRight, bottomLeft, bottomRight);
    }
    
}

//O(n^2) time and O(n) space
class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DisjointSet ds = new DisjointSet(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if(graph[i][j]==1) ds.union(i, j);
            }
        }
        int[] malwareCount = new int[n];
        for(int node:initial) {
            malwareCount[ds.parent[node]]++;
        }
        int maxNode = -1, maxSize = -1;
        for(int node:initial) {
            int parent = ds.find(node);
            if (malwareCount[parent] == 1) {
                int parentSize = ds.rank[parent];
                if (parentSize > maxSize || (parentSize == maxSize && node < maxNode)) {
                    maxSize = parentSize;
                    maxNode = node;
                }
            }
        }
        if (maxNode == -1) {
            maxNode = Integer.MAX_VALUE;
            for (int node: initial)
                maxNode = Math.min(maxNode, node);
        }
        return maxNode;
    }
}

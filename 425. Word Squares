class Solution {
    
    class TrieNode {
        List<String> prefixes;
        TrieNode[] children;
        public TrieNode() {
            prefixes = new ArrayList();
            children = new TrieNode[26];
        }
    }
    
    private void insert(String word) {
        TrieNode node = root;
        for(char c: word.toCharArray())
        {
            if(node.children[c-'a'] == null)
            {
                node.children[c-'a'] = new TrieNode();
            }
            node.children[c-'a'].prefixes.add(word);
            node = node.children[c-'a'];
        }
    }
    
    private List<String> getPrefixes(String word)
        {
            TrieNode node = root;
            List<String> res = new ArrayList();
            for(char ch: word.toCharArray())
            {
                if(node.children[ch-'a'] == null)
                    return res;
                
                node = node.children[ch-'a'];
            }
            return node.prefixes;
        }
    
    TrieNode root;
    List<List<String>> result;
    public List<List<String>> wordSquares(String[] words) {
        if(words==null || words.length==0) return new ArrayList();
        result = new ArrayList();
        root = new TrieNode();
        for(String word:words) {
            insert(word);
        }
        for(String word:words) {
            dfs(word, new ArrayList());
        }
        return result;
    }
    
    private void dfs(String word, List<String> list) {
        if(list.size()>word.length()) return;
        list.add(word);
        if(list.size() == word.length()) {
            result.add(new ArrayList(list));
        }
        else {
            StringBuilder preStr = new StringBuilder();
            for(String str: list) {
                preStr.append(str.charAt(list.size()));
            }
            List<String> prefixes = getPrefixes(preStr.toString());
            for(String prefix: prefixes) {
                dfs(prefix, list);
            }
        }
        list.remove(list.size()-1);
    }
    
}

//O(mn) time and space
class Solution {
    int max;
    public int longestLine(int[][] M) {
        if(M==null || M.length==0) return 0;
        max = 0;
        int m = M.length;
        int n = M[0].length;
        int[][][] dp = new int[m][n][4]; 
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(M[i][j]==1){
                    dp[i][j][0] = (j>0)?dp[i][j-1][0]+1:1;
                    dp[i][j][1] = (i>0)?dp[i-1][j][1]+1:1;
                    dp[i][j][2] = (i>0&&j>0)?dp[i-1][j-1][2]+1:1;
                    dp[i][j][3] = (i>0 && j<n-1)?dp[i-1][j+1][3]+1:1;
                    update(dp[i][j][0],dp[i][j][1],dp[i][j][2],dp[i][j][3]);
                }
            }
        }
        return max;
    }
    public void update(int a, int b, int c, int d){
        int max1 = Math.max(a,b);
        int max2 = Math.max(c,d);
        max = Math.max(max,Math.max(max1,max2));
    }
}

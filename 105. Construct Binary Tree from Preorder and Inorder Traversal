//O(n) time and space
class Solution {
    private Map<Integer, Integer> inorderMap;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }
        return helper(preorder, 0, preorder.length - 1, 0, inorder.length - 1);
    }

    private TreeNode helper(int[] preorder, int ps, int pe, int is, int ie) {
        if (ps > pe || is > ie) return null;
        TreeNode root = new TreeNode(preorder[ps]);
        int offset = inorderMap.get(preorder[ps]);
        root.left = helper(preorder, ps + 1, ps + offset - is, is, offset - 1);
        root.right = helper(preorder, ps + offset - is + 1, pe, offset + 1, ie);
        return root;
    }
}

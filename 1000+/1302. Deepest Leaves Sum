//O(n) time and space
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        int maxDepth = maxDepth(root);
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        int level = 1, result = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                TreeNode node = queue.poll();
                if(level==maxDepth) result+=node.val;
                if(node.left!=null) queue.offer(node.left);
                if(node.right!=null) queue.offer(node.right);
            }
            level++;
        }
        return result;
    }
    
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
    
}1302. Deepest Leaves Sum

//O(n) time and O(1) space
class Solution {
    public boolean canMakeArithmeticProgression(int[] arr) {
        if(arr==null || arr.length<2) return true;
        int n = arr.length, max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
        //For Ap, max = min + step*(n-1)
        for(int a:arr) {
            max = Math.max(max, a);
            min = Math.min(min, a);
        }
        if((max - min)%(n-1) != 0) return false;
        int step = (max - min)/(n-1);
        int i = 0;
        while(i<n) {
            int a = arr[i];
            if(a == min + step*i) i++;
            else if((a - min)%step!=0) return false;
            else {
                int pos = (a - min)/step;
                if(pos<i || arr[pos]==arr[i]) return false;
                swap(arr, i, pos);
            }
        }
        return true;
    }
    
    public void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    
}

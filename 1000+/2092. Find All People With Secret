//O(nlogn) time and O(n) space
class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
        public boolean isConnect(int a, int b) {
            return find(a) == find(b);
        }
    
        public void reset(int a) {
            parent[a] = a;
        }
        
    }
    
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        DisjointSet ds = new DisjointSet(n);
        Arrays.sort(meetings, (a,b)->(a[2]-b[2]));
        ds.union(0, firstPerson);
        Set<Integer> visited = new HashSet();
        visited.add(0);
        visited.add(firstPerson);
        for (int i = 0; i < meetings.length; i++) {
            int time = meetings[i][2];
            int x = i;
            while (x < meetings.length && meetings[x][2] == time) {
                ds.union(meetings[x][0], meetings[x][1]);   
                x++;
            }
            
            while (i < meetings.length && meetings[i][2] == time) {
                if (ds.isConnect(0, meetings[i][0]) || ds.isConnect(0, meetings[i][1])) {
                    visited.add(meetings[i][0]);
                    visited.add(meetings[i][1]);
                } else {
                    ds.reset(meetings[i][0]);
                    ds.reset(meetings[i][1]);
                }
                i++;
            }
            i--;

        }
        return visited.stream().collect(Collectors.toList());
    }
}

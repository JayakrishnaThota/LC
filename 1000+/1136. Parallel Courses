//O(V+E) time and space
class Solution {
    Map<Integer, Set<Integer>> map;
    Map<Integer, Integer> indegree;
    public int minimumSemesters(int N, int[][] relations) {
        construct(N, relations);
        return topSort();
    }
    
    public void construct(int N, int[][] relations) {
        map = new HashMap();
        indegree = new HashMap();
        for(int i=1;i<=N;i++) {
            map.put(i, new HashSet());
            indegree.put(i, 0);
        }
        for(int[] relation:relations) {
            int dependent = relation[0];
            int independent = relation[1];
            map.get(independent).add(dependent);
            indegree.put(dependent, indegree.getOrDefault(dependent, 0)+1);
        }
    }
    
    public int topSort() {
        int result = 0, count = 0;
        Queue<Integer> queue = new LinkedList();
        for(int key:indegree.keySet()) {
            if(indegree.get(key)==0) {
                count++;
                queue.offer(key);
            }
        }
        while(!queue.isEmpty()) {
            int size = queue.size();
            result++;
            for(int k=0;k<size;k++) {
                int u = queue.poll();
                for(int v:map.get(u)) {
                    indegree.put(v, indegree.get(v)-1);
                    if(indegree.get(v)==0) {
                        queue.offer(v);
                        count++;
                    }
                }
            }
        }
        return (count==indegree.size())?result:-1;
    }
    
}

//O(nlogn) time and O(n) space
class Solution {
    Map<Integer, Integer> map;
    public int getKth(int lo, int hi, int k) {
        map = new HashMap();
        PriorityQueue<int[]> pq =
                new PriorityQueue<>((a,b)-> b[1]!=a[1] ?a[1]-b[1]:a[0]-b[0]);
        for(int i=lo;i<=hi;i++) {
            pq.offer(new int[]{i, helper(i)});
        }
        int index = 0;
        while(!pq.isEmpty()) {
            if(++index==k) return pq.poll()[0];
            pq.poll();
        }
        return -1;
    }
    
    public int helper(int i) {
        if(i==1) return 0;
        if(map.containsKey(i)) return map.get(i);
        int power = 0;
        if(i%2==0) {
            power = 1 + helper(i/2);
        }
        else {
            power = 1 + helper(3*i + 1);
        }
        map.put(i, power);
        return power;
    }
    
}


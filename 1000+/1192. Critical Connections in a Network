//O(V+E) time and space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    int[] depth;
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        construct(n, connections);
        Set<List<Integer>> set = new HashSet(connections);
        dfs(0, 0, set);
        return new ArrayList(set);
    }
    
    public void construct(int n, List<List<Integer>> connections) {
        adjlist = new HashMap();
        depth = new int[n];
        for(int i=0;i<n;i++) {
            adjlist.putIfAbsent(i, new HashSet());
            depth[i] = -2;
        }
        for(List<Integer> connection:connections) {
            adjlist.get(connection.get(0)).add(connection.get(1));
            adjlist.get(connection.get(1)).add(connection.get(0));
        }
    }
    
    public int dfs(int u, int curDepth, Set<List<Integer>> set) {
        if(depth[u]>=0) return depth[u];
        depth[u] = curDepth;
        int min = curDepth;
        for(int v:adjlist.get(u)) {
            if(depth[v]==curDepth-1) continue;
            int vDepth = dfs(v, curDepth+1, set);
            min = Math.min(min, vDepth);
            if(vDepth<=curDepth) {
                set.remove(Arrays.asList(u,v));
                set.remove(Arrays.asList(v,u));
            }
        }
        return min;
    }
    
}

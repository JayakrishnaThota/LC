class Solution {
    Map<Integer, Set<Integer>> adjlist;
    int[] disc;
    int[] min;
    int time;
    List<List<Integer>> result;
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        construct(n, connections);
        for(int i=0;i<n;i++) {
            if(disc[i]==-1) {
                dfs(i, i);
            }
        }
        return result;
    }
    
    public void construct(int n, List<List<Integer>> connections) {
        time = 0;
        adjlist = new HashMap();
        disc = new int[n];
        min = new int[n];
        result = new ArrayList();
        for(int i=0;i<n;i++) {
            adjlist.put(i, new HashSet());
            disc[i] = -1;
        }
        for(List<Integer> connection:connections) {
            int u = connection.get(0), v = connection.get(1);
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
    }
    
    public void dfs(int u, int parent) {
        disc[u] = min[u] = time++;
        for(int v:adjlist.get(u)) {
            if(parent==v) continue;
            if(disc[v]==-1) {
                dfs(v, u);
                min[u] = Math.min(min[u], min[v]);
                if(min[v]>disc[u]) {
                    result.add(Arrays.asList(u,v));
                }
            } else {
                min[u] = Math.min(min[u], min[v]);
            }
        }
    }
    
}

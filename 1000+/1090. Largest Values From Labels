//O(nlogn) time and O(n) space
class Solution {
    public int largestValsFromLabels(int[] values, int[] labels, int num_wanted, int use_limit) {
        TreeMap<Integer, List<Integer>> map = new TreeMap(Collections.reverseOrder());
        int index = 0;
        for(int value:values) {
            map.putIfAbsent(value, new ArrayList());
            map.get(value).add(labels[index++]);            
        }
        int max = 0;
        Map<Integer, Integer> freqMap = new HashMap();
        for(Integer value:map.keySet()) {
            System.out.print(value);
            List<Integer> list = map.get(value);
            for(Integer label:list) {
                int freq = freqMap.getOrDefault(label,0);
                if(freq==use_limit) continue;
                System.out.print(label);
                freqMap.put(label, freq+1);
                max+=value;
                num_wanted--;
                System.out.println(num_wanted);
                if(num_wanted==0) return max;
            }
        }
        return max;
    }
}

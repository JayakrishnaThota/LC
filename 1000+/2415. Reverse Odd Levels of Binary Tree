// O(n) time and space
class Solution {
    public TreeNode reverseOddLevels(TreeNode root) {
        if(root==null) return root;
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root);
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                TreeNode node = queue.poll();
                if(node.left!=null) queue.offer(node.left);
                if(node.right!=null) queue.offer(node.right);
            }
            level++;
            if(level%2 == 1 && !queue.isEmpty()) {
                // Extract all values of queue to nums array
                int[] nums = new int[queue.size()];
                int i = 0;
                for(TreeNode node:queue) {
                    nums[i++] = node.val;
                }
                for(TreeNode node:queue) {
                    node.val = nums[--i];
                }
            }  
        }
        return root;
    }
}

//O(n+q) time and O(n) space
class Solution {
    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        int[] prefixSum = computePrefixSum(nums); 
        boolean[] res = new boolean[queries.length];
        for(int i=0;i<queries.length;i++) {
            int[] query = queries[i];
            res[i] = (prefixSum[query[0]] - prefixSum[query[1]] == 0);
        }
        return res;
    }

    //O(n) time and O(n) space
    private int[] computePrefixSum(int[] nums) {
        if(nums==null || nums.length==0) return new int[0];
        int[] sum = new int[nums.length];
        for(int i=1;i<nums.length;i++) {
            if(nums[i]%2 == nums[i-1]%2) {
                sum[i] = sum[i-1] + 1;
            } else {
                sum[i] = sum[i-1];
            }
        }
        return sum;
    }
}

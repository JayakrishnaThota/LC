//O(V+E) time and space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    public boolean validPath(int n, int[][] edges, int start, int end) {
        construct(n, edges);
        return bfs(start, end);
    }
    
    public void construct(int n, int[][] edges) {
        adjlist = new HashMap();
        for(int i=0;i<n;i++) {
            adjlist.put(i, new HashSet());
        }
        for(int[] edge:edges) {
            int u = edge[0], v = edge[1];
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
    }
    
    private boolean bfs(int s, int d) {
        Queue<Integer> queue = new LinkedList();
        Set<Integer> set = new HashSet();
        queue.offer(s);
        set.add(s);
        while(!queue.isEmpty()) {
            int u = queue.poll();
            if(u==d) return true;
            for(int v:adjlist.get(u)) {
                if(set.add(v)) {
                    queue.offer(v);
                }
            }
        }
        return false;
    }
    
}

//O(V+E) time and space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    public double frogPosition(int n, int[][] edges, int t, int target) {
        construct(n, edges);
        return bfs(n, t, target);
    }
    
    public void construct(int n, int[][] edges) {
        adjlist = new HashMap();
        for(int i=0;i<n;i++) {
            adjlist.put(i, new HashSet());
        }
        for(int[] edge:edges) {
            int u = edge[0]-1, v = edge[1]-1;
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
    }
    
    public double bfs(int n, int t, int target) {
        Queue<Integer> queue = new LinkedList();
        Set<Integer> visited = new HashSet();
        queue.offer(0);
        visited.add(0);
        double[] prob = new double[n];
        prob[0] = 1.0;
        while(!queue.isEmpty() && t-->0) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int u = queue.poll();
                int nextVerticesCount = 0;
                for(int v:adjlist.get(u)) {
                    if(!visited.contains(v)) nextVerticesCount++;
                }
                for(int v:adjlist.get(u)) {
                    if(!visited.contains(v)) {
                        visited.add(v);
                        queue.offer(v);
                        prob[v] = prob[u]/nextVerticesCount;
                    }
                }
                if(nextVerticesCount>0) prob[u] = 0;
            }
        }
        return prob[target-1];
    }
    
}

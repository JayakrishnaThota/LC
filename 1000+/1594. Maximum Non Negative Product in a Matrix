//O(mn) time and space
class Solution {
    public int maxProductPath(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        int mod = 1000000007;
        long[][][] dp = new long[m][n][2];
        dp[0][0][0] = dp[0][0][1] = grid[0][0];
        for(int i=1;i<m;i++) {
            dp[i][0][0] = dp[i][0][1] = grid[i][0] * dp[i - 1][0][0];
        }
        for(int j=1;j<n;j++) {
            dp[0][j][0] = dp[0][j][1] = grid[0][j] * dp[0][j - 1][0];
        }
        for(int i=1;i<m;i++) {
            for(int j=1;j<n;j++) {
                long a = grid[i][j] * Math.max(dp[i][j - 1][0], dp[i - 1][j][0]);
                long b = grid[i][j] * Math.min(dp[i][j - 1][1], dp[i - 1][j][1]);
                dp[i][j][0] = Math.max(a, b);
                dp[i][j][1] = Math.min(a, b);
            }
        }
        return dp[m-1][n-1][0]<0 ? -1 : (int)(dp[m-1][n-1][0]%mod);
    }
}

//O(E+VlogV) time and O(V) space
class Solution {
    
    class DisjointSet {
        int[] parent;
        int[] rank;
        int size;
        public DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for(int i=0;i<n;i++) {
                rank[i] = 1;
                parent[i] = i;
            }
            size = n;
        }
        
        //O(1) amortized
        public boolean union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return false;
            if(rank[parentA]>rank[parentB]) {
                parent[parentB] = parentA;
                rank[parentA]+=rank[parentB];
            }
            else {
                parent[parentA] = parentB;
                rank[parentB]+=rank[parentA];
            }
            size--;
            return true;
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }
    
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {
        DisjointSet ds = new DisjointSet(n+1);
        int[][] connections = new int[wells.length+pipes.length][3];
        int index = 0;
        for(int i=0;i<wells.length;i++) {
            connections[index++] = new int[]{0, i+1, wells[i]};
        }
        for(int[] pipe:pipes) {
            connections[index++] = pipe;
        }
        Arrays.sort(connections, (a, b) -> (a[2]-b[2]));
        int res = 0;
        for(int[] connection:connections) {
            int u = connection[0], v = connection[1], w = connection[2];
            if(ds.union(u,v)) {
                res+=w;
            }
        }
        return (ds.size==1)?res:-1;
    }
}

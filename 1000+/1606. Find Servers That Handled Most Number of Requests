//O(nlogn) time and O(n) space
class Solution {
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        if(arrival==null || arrival.length==0 || k<1) return new ArrayList();
        int[] buckets = new int[k];
        PriorityQueue<int[]> busyServers = new PriorityQueue<int[]>((a,b)->(a[1]-b[1]));
        TreeSet<Integer> availableServers = new TreeSet();
        for(int i=0;i<k;i++) {
            availableServers.add(i);
        }
        for(int i=0;i<arrival.length;i++) {
            int curTime = arrival[i];
            int endTime = arrival[i] + load[i];
            while(!busyServers.isEmpty() && busyServers.peek()[1]<=curTime) {
                availableServers.add(busyServers.poll()[0]);
            }
            if(availableServers.size()==0) continue;
            Integer ceil = availableServers.ceiling(i%k);
            if(ceil==null) {
                ceil = availableServers.first();
            }
            buckets[ceil]++;
            availableServers.remove(ceil);
            busyServers.offer(new int[]{ceil, endTime});
        }
        return getMax(buckets);
    }
    
    private List<Integer> getMax(int[] counter) {
        int max = 0;
        for (int i = 0; i < counter.length; i++) {
            max = Math.max(max, counter[i]);
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < counter.length; i++) {
            if (counter[i] == max) {
                result.add(i);
            }
        }
        return result;
    }
    
}

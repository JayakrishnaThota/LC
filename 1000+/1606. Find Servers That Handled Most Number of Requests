//O(nlogn) time and O(n) space
class Solution {
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        List<Integer> result = new ArrayList();
        int[] counter = new int[k];
        int n = arrival.length;
        TreeSet<Integer> availableServers = new TreeSet();
        PriorityQueue<int[]> busyServers = new PriorityQueue<int[]>((a,b)->(a[0]-b[0]));
        for(int i=0;i<k;i++) {
            availableServers.add(i);
        }
        for(int i=0;i<n;i++) {
            int time = arrival[i], l = load[i];
            while(!busyServers.isEmpty() && busyServers.peek()[0]<=time) {
                availableServers.add(busyServers.poll()[1]);
            }
            if(availableServers.size()==0) {
                continue;
            }
            Integer ceil = availableServers.ceiling(i%k);
            if(ceil==null) {
                ceil = availableServers.first();
            }
            counter[ceil]++;
            availableServers.remove(ceil);
            busyServers.offer(new int[]{time+l, ceil});
        }
        int maxCount = counter[0];
        for(int i=1;i<k;i++) {
            maxCount = Math.max(maxCount, counter[i]);
        }
        for(int i=0;i<k;i++) {
           if(maxCount==counter[i]) {
               result.add(i);
           }
        }
        return result;
    }
}

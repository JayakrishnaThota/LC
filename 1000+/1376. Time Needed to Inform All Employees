//O(n) time and space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
        construct(manager, n);
        return bfs(headID, informTime);
    }
    
    public void construct(int[] manager, int n) {
        adjlist = new HashMap();
        for(int i=0;i<n;i++) {
            adjlist.put(i, new HashSet());
        }
        for(int i=0;i<n;i++) {
            if(manager[i]==-1) continue;
            adjlist.get(manager[i]).add(i);
        }
    }
    
    public int bfs(int source, int[] informTime) {
        Queue<int[]> queue = new LinkedList();
        queue.offer(new int[]{source, 0});
        int max = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i=0;i<size;i++) {
                int u = queue.peek()[0], time = queue.poll()[1];
                for(int v:adjlist.get(u)) {
                    int newTime = time + informTime[u];
                    queue.offer(new int[]{v, newTime});
                    max = Math.max(max, newTime);
                }
            }
        }
        return max;
    }
    
}

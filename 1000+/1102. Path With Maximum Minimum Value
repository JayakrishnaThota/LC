//O(mn*logmn) time and O(mn) space
class Solution {
    public int maximumMinimumPath(int[][] A) {
        if(A==null || A.length==0) return 0;
        int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        int m = A.length, n = A[0].length, min = Integer.MAX_VALUE;
        boolean[][] visited = new boolean[m][n];
        PriorityQueue<int[]> pq = new PriorityQueue(1, new Comparator<int[]>(){
           public int compare(int[] a, int[] b) {
               return b[2] - a[2];
           } 
        });
        visited[0][0] = true;
        pq.offer(new int[]{0,0,A[0][0]});
        while(!pq.isEmpty()) {
            int[] cell = pq.poll();
            if(cell[0]==m-1 && cell[1]==n-1) return cell[2];
            for(int[] dir:dirs) {
                int x = cell[0] + dir[0];
                int y = cell[1] + dir[1];
                if(x<0 || y<0 || x>=m || y>=n || visited[x][y]) continue;
                pq.offer(new int[]{x,y,Math.min(cell[2],A[x][y])});
                visited[x][y] = true;
            }
        }
        return -1;
    }
}

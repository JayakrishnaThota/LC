//O(V+E) time and space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
        construct(n, edges);
        if (adjlist.containsKey(destination)) return false;
        return dfs(source, destination, new boolean[n]);
    }
    
    public void construct(int n, int[][] edges) {
        adjlist = new HashMap();
        for(int[] edge:edges) {
            int u = edge[0], v = edge[1];
            adjlist.putIfAbsent(u, new HashSet());
            adjlist.get(u).add(v);
        }
    }
    
    public boolean dfs(int s, int d, boolean[] seen) {
        if(s==d) return true;
        seen[s] = true;
        if(!adjlist.containsKey(s)) return false;
        for(int v:adjlist.get(s)) {
            if(seen[v] || !dfs(v, d, seen)) return false;
        }
        seen[s] = false;
        return true;
    }
    
}

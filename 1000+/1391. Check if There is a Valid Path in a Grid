//O(mn) time and space
class Solution {
    public boolean hasValidPath(int[][] grid) {
        int[][][] dirs = {
                {{0, -1}, {0, 1}},
                {{-1, 0}, {1, 0}},
                {{0, -1}, {1, 0}},
                {{0, 1}, {1, 0}},
                {{0, -1}, {-1, 0}},
                {{0, 1}, {-1, 0}}
        };
        if(grid==null || grid.length==0) return true;
        int m = grid.length, n = grid[0].length;
        if(m==1 && n==1) return true;
        Queue<int[]> queue = new LinkedList();
        boolean[][] visited = new boolean[m][n];
        queue.offer(new int[]{0,0});
        visited[0][0] = true;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int[] cell = queue.poll();
                int i = cell[0], j = cell[1];
                int index = grid[i][j] - 1;
                for(int[] dir:dirs[index]) {
                    int x = i + dir[0], y = j + dir[1];
                    if(x<0 || y<0 || x>=m || y>=n || visited[x][y]) continue;
                    int backIndex = grid[x][y] - 1;
                    for(int[] backDir:dirs[backIndex]) {
                        if(x+backDir[0]==i && y+backDir[1]==j) {
                            if(x==m-1 && y==n-1) return true;
                            visited[x][y] = true;
                            queue.offer(new int[]{x,y});
                            break;
                        }
                    }
                }
            }
        }
        return false;
    }
}

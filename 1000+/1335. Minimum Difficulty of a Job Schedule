//O(n^2*d) time and O(nd) space
class Solution {
    public int minDifficulty(int[] jobDifficulty, int d) {
        if(jobDifficulty==null || jobDifficulty.length<d) return -1;
        int n = jobDifficulty.length;
        Integer[][] memo = new Integer[d+1][n];
        helper(jobDifficulty, d, 0, memo);
        return memo[d][0];
    }
    
    public int helper(int[] jobDifficulty, int d, int jIndex, Integer[][] memo) {
        if(jIndex==jobDifficulty.length && d==0)  return 0; 
        if(jIndex==jobDifficulty.length || d==0)  return Integer.MAX_VALUE; 
        
        if(memo[d][jIndex]!=null) return memo[d][jIndex];
        
        memo[d][jIndex] = Integer.MAX_VALUE;
        int max = jobDifficulty[jIndex];
        for(int j=jIndex;j<jobDifficulty.length;j++) {
            max = Math.max(max, jobDifficulty[j]);
            int res = helper(jobDifficulty, d-1, j+1, memo);
            if(res==Integer.MAX_VALUE) continue;
            memo[d][jIndex] = Math.min(memo[d][jIndex], res+max);
        }
        return memo[d][jIndex];
    }
    
}

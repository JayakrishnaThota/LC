//O(mn) time and space
class Solution {
    public int minimumMoves(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[] start = {0, 0, 0, 0}, target = {n - 1, n - 2, 0};
        Queue<int[]> q = new LinkedList<>();
        Set<String> seen = new HashSet<>();
        q.offer(start);
        while (!q.isEmpty()) {
            int[] pos = q.poll();
            int r = pos[0], c = pos[1], dr = pos[2], steps = pos[3];
            if (Arrays.equals(Arrays.copyOf(pos, 3), target))
                return steps;
            if (seen.add(r + "," + c + "," + dr)) {
                if(dr==0) {
                    if(r+1<n && grid[r + 1][c] + grid[r + 1][c + 1] == 0)   
                        q.addAll(Arrays.asList(new int[]{r + 1, c, 0, steps + 1}, new int[]{r, c, 1, steps + 1}));
                    if (c + 2 < n && grid[r][c + 2] == 0)
                        q.offer(new int[]{r, c + 1, 0, steps + 1});   
                }
                else {
                    if (c + 1 < n && grid[r][c + 1] + grid[r + 1][c + 1] == 0) 
                        q.addAll(Arrays.asList(new int[]{r, c + 1, 1, steps + 1}, new int[]{r, c, 0, steps + 1}));
                    if (r + 2 < n && grid[r + 2][c] == 0)
                        q.offer(new int[]{r + 1, c, 1, steps + 1});
                }
            }
        }
        return -1;
    }
}

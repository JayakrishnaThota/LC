class Solution {
    
    public class TrieNode{
        boolean isEnd;
        TrieNode[] children = new TrieNode[26];
        public TrieNode(){
            
        }
        public TrieNode(char ch){
            TrieNode node = new TrieNode();
        }
    }
    TrieNode root;
    int max;
    public void insert(String word) {
     TrieNode temp = root;
     for(int i=0;i<word.length();i++){
         char c = word.charAt(i);
         if(temp.children[c-'a']==null)
             temp.children[c-'a'] = new TrieNode(c);
         else {
             max = Math.max(max, i+1);
         }
         temp = temp.children[c-'a'];
     }
        temp.isEnd = true;
    }
    
    //O(n^2) time and O(n) space
    public int longestRepeatingSubstring(String S) {
        root = new TrieNode();
        max = 0;
        int n = S.length();
        for(int i=0;i<n;i++) {
            String key = S.substring(i, n);
            insert(key);
        }
        return max;
    }
}

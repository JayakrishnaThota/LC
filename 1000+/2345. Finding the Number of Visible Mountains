//O(nlogn) time and O(1) space
class Solution {
    public int visibleMountains(int[][] peaks) {
        if(peaks==null || peaks.length==0) return 0;
        for(int[] peak:peaks) {
            int midX = peak[0];
            int height = peak[1];
            peak[0] = midX-height;
            peak[1] = midX+height;
        }
        Arrays.sort(peaks, new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                if(a[0]!=b[0]) return a[0]-b[0];
                else return a[1]-b[1];
            }
        });
        int res = 0, index = 0, n = peaks.length;
        while(index<n) {
            res++;
            if(index==n-1) {
                return res;
            }
            int left = peaks[index][0], right = peaks[index][1];
            if(peaks[index+1][0]==left) {
                res--;
            }
            while(index+1<n && right>=peaks[index+1][1]) {
                index++;
            }
            index++;
        }
        return res;
    }
}

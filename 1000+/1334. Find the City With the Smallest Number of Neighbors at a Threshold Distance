//O(n^3) time and O(n^2) space
class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        int[][] distanceMap = new int[n][n];
        for(int i=0;i<n;i++) {
            Arrays.fill(distanceMap[i], 10001);
        }
        for(int i=0;i<n;i++) {
            distanceMap[i][i] = 0;
        }
        for(int[] edge:edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            distanceMap[u][v] = distanceMap[v][u] = w;
        }
        int res = 0, min = n;
        for(int k=0;k<n;k++) {
            for(int i=0;i<n;i++) {
                for(int j=0;j<n;j++) {
                    distanceMap[i][j] = Math.min(distanceMap[i][j], distanceMap[i][k]+distanceMap[k][j]);
                }
            }
        }
        for(int i=0;i<n;i++) {
            int count = 0;
            for(int j=0;j<n;j++) {
                if(distanceMap[i][j]<=distanceThreshold) count++;
            }
            if(count<=min) {
                min = count;
                res = i;
            }
        }
        return res;
    }
}

//O(nlogn) time and O(n) space
class Solution {
    int mod = 1_000_000_007;
    public String longestDupSubstring(String s) {
        if(s == null || s.length() == 0)
            return s;
        
        int n = s.length();
        int[] nums = new int[n];
        for(int i=0; i<n; i++)
        {
            nums[i] = s.charAt(i) - 'a';
        }
        
        int low = 0, high = n-1;
        while(low < high)
        {
            int mid = low+(high - low + 1)/2;
            if(canFindSubstring(s, nums, n, mid+1) == -1)
                high = mid-1;
            else
                low = mid;
        }
        int idx = canFindSubstring(s, nums, n, low+1);
        return (idx == -1) ? "" : s.substring( idx, idx+low+1);
    }
    
  
    
    private int canFindSubstring(String s, int[] nums, int n, int len)
    {
        long al = 1;
        int a = 26;
        long h = 0;

        for(int i=0; i<len; i++)
        {
            al = (al * a)%mod;
        }
        for(int i=0; i<len; i++)
        {
            h = ((h*a) + nums[i])%mod;
        }
        HashMap<Long, List<Integer>> map = new HashMap();
        map.put(h, new ArrayList());
        map.get(h).add(0);
        for(int start = 1; start < n-len+1; start++)
        {
            h = (h*a - nums[start-1] * al %mod + mod) % mod;
            h = (h + nums[start + len-1]) %mod;
            List<Integer> hits = map.get(h);
            String str = s.substring(start, start+len);
            if(hits != null)
            {
                for(int hit: hits)
                {
                    String strcmp = s.substring(hit, hit+len);
                    if(str.equals(strcmp))
                        return hit;
                }
            }
            map.putIfAbsent(h, new ArrayList());
            map.get(h).add(start);
        }
        return -1;
    }
}

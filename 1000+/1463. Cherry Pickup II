//O(m*n^2) time and space
class Solution {
    public int cherryPickup(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        Integer[][][] dp = new Integer[m][n][n];
        return helper(grid,0,0,n-1,m,n,dp);
    }
    
    public int helper(int[][] grid, int r, int c1, int c2, int m, int n, Integer[][][] dp) {
        if(r==m) return 0;
        if(dp[r][c1][c2]!=null) return dp[r][c1][c2];
        int result = 0;
        for(int i=-1;i<=1;i++) {
            for(int j=-1;j<=1;j++) {
                int nc1 = c1 + i, nc2 = c2 + j;
                if(nc1>=0 && nc2<n && nc1<n && nc2>=0) {
                    result = Math.max(result, helper(grid,r+1,nc1,nc2,m,n,dp));
                }
            }
        }
        int cherries = (c1==c2)?grid[r][c1]:grid[r][c1]+grid[r][c2];
        dp[r][c1][c2] = result+cherries;
        return result+cherries;
    }
}

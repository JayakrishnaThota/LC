//O(N) time and space
class Solution {
    Map<Integer, Set<Integer>> adjlist;
    Set<Integer> set;
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        construct(n, edges);
        return dfs(0, hasApple);
    }
    
    public int dfs(int source, List<Boolean> hasApple) {
        set.add(source);
        int res = 0;
        for(int neighbor:adjlist.get(source)) {
            if(set.contains(neighbor)) continue;
            res+=dfs(neighbor, hasApple);
        }
        if((res>0 || hasApple.get(source)) && source!=0) res+=2;
        return res;
    }
    
    public void construct(int n, int[][] edges) {
        adjlist = new HashMap();
        set = new HashSet();
        for(int i=0;i<n;i++) {
            adjlist.put(i, new HashSet());
        }
        for(int[] edge:edges) {
            int u = edge[0], v = edge[1];
            adjlist.get(u).add(v);
            adjlist.get(v).add(u);
        }
    }
    
}

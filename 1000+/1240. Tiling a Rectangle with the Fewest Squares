class Solution {
    int res = Integer.MAX_VALUE;
    Map<String, Integer> map;
    public int tilingRectangle(int n, int m) {
        if(n==m) return 1;
        if(n>m) {
            return tilingRectangle(m, n);
        }
        map = new HashMap();
        int[] h = new int[n+1];
        dfs(n, m, h, 0);
        return res;
    }
    
    public void dfs(int n, int m, int[] h, int count) {
        if(count>=res) {
            return;
        }
        int minH = m, pos = -1;
        for(int i=1;i<=n;i++) {
            if(h[i]<minH) {
                minH = h[i];
                pos = i;
            }
        }
        if(minH==m) {
            res = Math.min(res, count);
            return;
        }
        String key = Arrays.toString(h);
        if(map.containsKey(key) && map.get(key)<=count) {
            return;
        }
        int end = pos;
        while(end+1<=n && h[end+1]==minH && end+1-pos+1+minH<=m) end++;
        for(int j=pos;j<=end;j++) {
            int curH = j-pos+1;
            int[] newH = Arrays.copyOf(h, n+1);
            for(int k=pos;k<=j;k++) {
                newH[k] += curH;
            }
            dfs(n, m, newH, count+1);
        }
        map.put(key, count);
    }
    
}

//O(n^3) time and O(n^2) space
class Solution {
    Map<Integer, List<Integer>> adjlist;
    public int maximumDetonation(int[][] bombs) {
        if(bombs==null || bombs.length==0) return 0;
        int n = bombs.length;
        adjlist = new HashMap();
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                int x1 = bombs[i][0], y1 = bombs[i][1], r1 = bombs[i][2];
                int x2 = bombs[j][0], y2 = bombs[j][1];
                long r = (long)r1*r1, d = getEuclideanDistance(x1, y1, x2, y2);
                if(r>=d) {
                    adjlist.putIfAbsent(i, new ArrayList());
                    adjlist.get(i).add(j);
                }
            }
        }
        int max = 0;
        for(int i=0;i<n;i++) {
            max = Math.max(max, bfs(i));
        }
        return max;
    }

    private int bfs(int source) {
        Queue<Integer> queue = new LinkedList();
        Set<Integer> visited = new HashSet();
        queue.offer(source);
        visited.add(source);
        while(!queue.isEmpty()) {
            int u = queue.poll();
            if(adjlist.get(u)==null) continue;
            for(int v:adjlist.get(u)) {
                if(!visited.contains(v)) {
                    queue.offer(v);
                    visited.add(v);
                }
            }
        }
        return visited.size();
    }

    private long getEuclideanDistance(int x1, int y1, int x2, int y2) {
        return (long)(x1-x2)*(x1-x2) + (long)(y1-y2)*(y1-y2);
    }
}

//O(m^2*n^2) time and O(mn) space
class Solution {
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    public boolean containsCycle(char[][] grid) {
        if(grid==null || grid.length==0) return false;
        int m = grid.length, n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(visited[i][j]) continue;
                if(bfs(grid,i,j,m,n,-1,-1,visited)) return true;
            }
        }
        return false;
    }
    
    public boolean bfs(char[][] grid, int curi, int curj, int m, int n, int previ, int prevj, boolean[][] visited) {
        char c = grid[curi][curj];
        Queue<int[]> queue = new LinkedList();
        queue.offer(new int[]{curi, curj, previ, prevj});
        visited[curi][curj] = true;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int[] cell = queue.poll();
                for(int[] dir:dirs) {
                    int x = dir[0] + cell[0];
                    int y = dir[1] + cell[1];
                    if(x<0 || y<0 || x>=m || y>=n || grid[x][y]!= grid[curi][curj] || (x==cell[2] && y==cell[3])) continue;
                    if(visited[x][y]) return true;
                    queue.offer(new int[]{x,y,cell[0],cell[1]});
                    visited[x][y] = true;
                }
            }
        }
        return false;
    }
    
}

//O(nlogn) time and O(n) space
class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n = nums1.length;
        long sum =0, max = 0;
        int[][] pairs = new int[n][2];
        for(int i=0;i<n;i++) {
            pairs[i] = new int[]{nums1[i], nums2[i]};
        }
        Arrays.sort(pairs, (a,b)->b[1]-a[1]);
        PriorityQueue<Integer> pq = new PriorityQueue();
        for(int i=0;i<k;i++) {
            pq.offer(pairs[i][0]);
            sum+=pairs[i][0];
        }
        max = sum*pairs[k-1][1];
        for(int i=k;i<n;i++) {
            sum += pairs[i][0] - pq.poll();
            pq.offer(pairs[i][0]);
            max = Math.max(max, sum*pairs[i][1]);
        }
        return max;
    }
}

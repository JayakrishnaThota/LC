//O(n) time and space
class Solution {
    public boolean canReach(int[] arr, int start) {
        if(arr==null || arr.length==0) return true;
        int n = arr.length;
        Queue<Integer> queue = new LinkedList();
        Set<Integer> set = new HashSet();
        queue.offer(start);
        set.add(start);
        if(arr[start]==0) return true;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int cur = queue.poll();
                if(cur+arr[cur]<n) {
                    if(set.add(cur+arr[cur])) {
                        queue.offer(cur+arr[cur]);
                        if(arr[cur+arr[cur]]==0) return true;
                    }
                }
                if(cur-arr[cur]>=0) {
                    if(set.add(cur-arr[cur])) {
                        queue.offer(cur-arr[cur]);
                        if(arr[cur-arr[cur]]==0) return true;
                    }
                }
            }
        }
        return false;
    }
}

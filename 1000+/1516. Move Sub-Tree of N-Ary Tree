//O(n) time and space
class Solution {
    public Node moveSubTree(Node root, Node p, Node q) {
        Map<Node, Node> parents = getParents(root);
        if(parents.get(p)==q) return root;
        //Case 1
        if(isAncestor(p,q,parents)) {
            if(parents.get(p)==null) {
                removeParent(q, parents);
                q.children.add(p);
                return q;
            }
            else {
                removeParent(q, parents);
                q.children.add(p);
                Node parentP = parents.get(p);
                int index = 0;
                while(index<parentP.children.size()) {
                    if(parentP.children.get(index)==p) break;
                    index++;
                }
                parentP.children.set(index, q);
                return root;
            }
        }
        //Case 2 and 3
        else {
            removeParent(p, parents);
            q.children.add(p);
            return root;
        }
    }
    
    public Map<Node, Node> getParents(Node root){
        Map<Node, Node> parents = new HashMap();
        if(root==null) return parents;
        parents.put(root, null);
        Queue<Node> queue = new LinkedList();
        queue.offer(root);
        while(!queue.isEmpty()) {
            Node node  = queue.poll();
            for(Node child:node.children) {
                parents.put(child, node);
                queue.offer(child);
            }
        }
        return parents;
    }
    
    public boolean isAncestor(Node p, Node q, Map<Node, Node> parents) {
        if(p==q) return true;
        Node iter = q;
        while(iter!=null) {
            iter = parents.get(iter);
            if(iter==p) return true;
        }
        return false;
    }
    
    public void removeParent(Node p, Map<Node, Node> parents) {
        Node parentP = parents.get(p);
        if(parentP==null) return;
        parentP.children.remove(p);
        parents.remove(p);
    }
    
}

//O(mn^2*log(mn^2)) time and O(mn^2) space
class Solution {
    public int minPushBox(char[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m = grid.length, n = grid[0].length;
        int[][] dirs = {{0,1},{1,0},{-1,0},{0,-1}};
        int[] player = new int[2];
        int[] box = new int[2];
        int[] target = new int[2];
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j]=='S') {
                    player[0] = i;
                    player[1] = j;
                } if(grid[i][j]=='B') {
                    box[0] = i;
                    box[1] = j;
                } if(grid[i][j]=='T') {
                    target[0] = i;
                    target[1] = j;
                }
            }
        }
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b)->(a[0]-b[0]));
        pq.offer(new int[]{distance(box, target), player[0], player[1], box[0], box[1], 0});
        Set<String> visited = new HashSet();
        while(!pq.isEmpty()) {
            int[] cell = pq.poll();
            int dist = cell[0], px = cell[1], py = cell[2], bx = cell[3], by = cell[4], moves = cell[5];
            if(bx==target[0] && by==target[1]) return moves;
            String key = px+":"+py+"|"+bx+":"+by;
            if(visited.contains(key)) continue;
            visited.add(key);
            for(int[] dir:dirs) {
                int npx = px + dir[0];
                int npy = py + dir[1];
                int[] next;
                if(isInValid(npx, npy, m, n, grid)) continue;
                if(npx==bx && npy==by) {
                    int nbx= bx+dir[0];
                    int nby = by + dir[1];
                    if(isInValid(nbx, nby, m, n, grid)) continue;
                    int[] newBox = {nbx,nby};
                    next = new int[]{distance(newBox, target)+moves+1, npx, npy, nbx, nby, moves+1};
                } else {
                    next = new int[]{dist, npx, npy, bx, by, moves};
                }
                pq.offer(next);
            }
        }
        return -1;
    }
    
    private int distance(int[] a, int[] b) {
        return Math.abs(a[0]-b[0]) + Math.abs(a[1]-b[1]);
    }
    
    private boolean isInValid(int x, int y, int m, int n, char[][] grid) {
        return (x<0 || x>=m || y<0 || y>=n || grid[x][y]=='#');
    }
    
}

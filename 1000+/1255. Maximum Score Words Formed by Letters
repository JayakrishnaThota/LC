class Solution {
    HashMap<String, Integer> dp;
    public int maxScoreWords(String[] words, char[] letters, int[] score) {
        if(words == null || words.length == 0 || letters == null || letters.length == 0 || score == null || score.length == 0)
            return 0;
        dp = new HashMap();
        int[] map = new int[26];
        for(char letter: letters)
            map[letter - 'a']++;
        
        int res =  helper(words, map, score, 0);
        return res;
    }
    
    private int helper(String[] words, int[] map, int[] score, int idx)
    {
        if(idx == words.length)
            return 0;
        
        String key = Arrays.toString(map)+","+idx;
        
        if(dp.containsKey(key))
            return dp.get(key);
        
        int res = 0;
        for(int i=idx; i<words.length; i++)
        {
            String word = words[i];
            int[] newMap = Arrays.copyOf(map, map.length);
            
            int wordScore = canAddWord(word, newMap, score);
            if(wordScore != Integer.MIN_VALUE)
            {
                int val = helper(words, newMap, score, i+1)  + wordScore;
                res = Math.max(res, val);
            }
        }
        dp.put(key, res);
        return res;
    }
    
    private int canAddWord(String word, int[] newMap, int[] score)
    {
        int res = 0;
        for(char ch: word.toCharArray())
        {
            if(--newMap[ch-'a'] < 0)
                return Integer.MIN_VALUE;
            
            res += score[ch - 'a'];
        }
        return res;
    }
}

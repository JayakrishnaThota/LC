//O(nlogn) time and O(n) space
class Solution {
    
    class DisjointSet {
        int[] parent;
        public DisjointSet(int n) {
            parent = new int[n];
            for(int i=0;i<n;i++) {
                parent[i] = i;
            }
        }
        
        //O(1) amortized
        public void union(int a, int b) {
            int parentA = find(a);
            int parentB = find(b);
            if(parentA==parentB) return;
            if(parentA<parentB) {
                parent[parentB] = parentA;
            }
            else {
                parent[parentA] = parentB;
            }
        }
        
        //O(1) amortized
        public int find(int a) {
            if(a==parent[a]) return a;
            parent[a] = find(parent[a]);
            return parent[a];
        }
        
    }
    
    public String smallestEquivalentString(String A, String B, String S) {
        DisjointSet ds = new DisjointSet(26);
        for(int i = 0; i < A.length(); i++) {
            int a = A.charAt(i) - 'a';
            int b = B.charAt(i) - 'a';
            ds.union(a, b);
        }
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < S.length(); i++) {
            char c = S.charAt(i);
            sb.append((char)('a' + ds.find(c - 'a')));
        }
        return sb.toString();
    }
}

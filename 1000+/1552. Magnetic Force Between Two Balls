//O(nlogn) time and O(1) space
class Solution {
    public int maxDistance(int[] position, int m) {
        Arrays.sort(position);
        int low = 0;
        int high = position[position.length-1];
        while (low < high) {
            int mid = low + (high-low)/2;
            if (canPut(position, m, mid)) {
                low = mid+1;
            } else {
                high = mid;
            }
        }
        return low-1;
    }

    /*
    * returns whether we can put m balls such that minimum distance between two consecutive ball is always greater than or equal to the max.
    */
    private boolean canPut(int[] positions, int m, int max) {
        int count = 1;
        int last = positions[0];
        for (int i = 0; i < positions.length; i++) {
            if (positions[i] - last >= max) {
                last = positions[i];
                count++;
            }
        }
        return count >= m;
    }
}

//O(nlogn) time and O(1) space
//n is the max element
class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        if(bloomDay==null || bloomDay.length==0) return -1;
        int n = bloomDay.length;
        if(m*k>n) return -1;
        int max = 1;
        for(int b:bloomDay) max = Math.max(max, b);
        int low = 1, high = max;
        while(low<high) {
            int mid = low + (high-low)/2;
            if(!valid(mid, bloomDay, m, k)) {
                low = mid+1;
            }
            else {
                high = mid;
            }
        }
        return low;
    }
    
    public boolean valid(int mid, int[] bloomDay, int m, int k) {
        int sum = 0, count = 0;
        for(int i=0;i<bloomDay.length;i++) {
            if(bloomDay[i]>mid) count = 0;
            else {
                count++;
                if(count==k) {
                    count = 0;
                    sum++;
                }
            }
        }
        return (sum>=m);
    }
    
}

//O(n) time and space
class Solution {
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        if(root==null) return null;
        return postOrder(root).node;
    }
    
    public Result postOrder(TreeNode root){
        if(root==null) return new Result(null, 0);
        Result left = postOrder(root.left);
        Result right = postOrder(root.right);
        if(left.depth>right.depth){
            return new Result(left.node, left.depth+1);
        }
        if(left.depth<right.depth){
            return new Result(right.node, right.depth+1);
        }
        return new Result(root, 1+left.depth);
    }
    
    class Result{
        TreeNode node;
        int depth;
        public Result(TreeNode node, int depth){
            this.node = node;
            this.depth = depth;
        }
    }
}

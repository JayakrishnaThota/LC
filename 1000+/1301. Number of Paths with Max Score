//O(mn) time and space
class Solution {

    public int[] pathsWithMaxScore(List<String> board) {
        if(board==null || board.size()==0) return new int[]{0,0};
        int m = board.size(), n = board.get(0).length();
        int[][] dirs = new int[][]{{-1,0},{0,-1},{-1,-1}};
        int mod = (int)(1e+9 + 7);
        int[][] dpSum = new int[m][n];
        int[][] dpCnt = new int[m][n];
        dpCnt[m-1][n-1] = 1;
        for(int i=m-1;i>=0;i--) {
            for(int j=n-1;j>=0;j--) {
                if(dpCnt[i][j]==0) continue;
                for(int[] dir:dirs) {
                    int x = i + dir[0], y = j + dir[1];
                    if(x<0 || y<0 || x>=m || y>=n || board.get(x).charAt(y)=='X') continue;
                    char c = board.get(x).charAt(y);
                    int sum = dpSum[i][j], ways = dpCnt[i][j];
                    if(c!='E') {
                        sum+=Character.getNumericValue(c);
                    }
                    if(sum>dpSum[x][y]) {
                        dpSum[x][y] = sum;
                        dpCnt[x][y] = ways;
                    }
                    else if(sum==dpSum[x][y]) {
                        dpCnt[x][y]+=ways;
                        dpCnt[x][y]%=mod;
                    }
                }
            }
        }
        return new int[]{dpSum[0][0], dpCnt[0][0]};
    }
}

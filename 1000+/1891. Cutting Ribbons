//O(nlog(MaxLengthRibbon)) Time and O(1) space
class Solution {
    public int maxLength(int[] ribbons, int k) {
        if(ribbons==null || ribbons.length==0 || k<1)
            return 0;
        int n = ribbons.length, low= 0, high = 0, res = 0;
        for(int r:ribbons) {
            high = Math.max(r, high);
        }
        while(low<=high) {
            int mid = low+(high - low)/2;
            if(canCutRibbons(ribbons, mid, k) && ((high==mid) || (!canCutRibbons(ribbons, mid+1, k)))) {
                return mid;
            } else if(canCutRibbons(ribbons, mid, k)) {
                low = mid+1;
            } else {
                high = mid-1;
            }
        }
        return 1;
    }
    
    public boolean canCutRibbons(int[] ribbons, int len, int k) {
        if(len<1) return true;
        int res = 0;
        for(int r:ribbons) {
            res+=(r/len);
        }
        return (res>=k);
    }
    
}

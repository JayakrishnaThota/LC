//O(nlogn) time and O(n) space
class Solution {
    public long findScore(int[] nums) {
        long res = 0;
        int n = nums.length;
        boolean[] marked = new boolean[n];
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b)->{
            if(a[0]!=b[0]) return a[0] - b[0];
            else return a[1] - b[1];
        });
        for(int i=0;i<n;i++) {
            pq.add(new int[]{nums[i],i});
        }
        while(!pq.isEmpty()) {
            int[] top = pq.poll();
            int val = top[0], index = top[1];
            if(!marked[index]) {
                res+=val;
                if(index-1>=0) marked[index-1] = true;
                if(index+1<n) marked[index+1] = true;
            }
        }
        return res;
    }
}

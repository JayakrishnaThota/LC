class Solution {
    public String rankTeams(String[] votes) {
        if(votes==null || votes.length==0) return "";
        Map<Character, int[]> map = new HashMap();
        int k = votes[0].length();
        //O(nk) time and O(k) space
        for(String vote:votes) {
            for(int i=0;i<k;i++) {
                char c = vote.charAt(i);
                map.putIfAbsent(c, new int[k]);
                map.get(c)[i]++;
            }
        }
        List<Character> list = new ArrayList(map.keySet());
        //O(klogk) time and O(k) space
        Collections.sort(list, (a,b)->{
            for(int i=0;i<k;i++) {
                if(map.get(a)[i]!=map.get(b)[i])
                    return map.get(b)[i]-map.get(a)[i];
            }
            return a-b;
        });
        StringBuffer sb = new StringBuffer();
        for(char c:list) sb.append(c);
        return sb.toString();
    }
}

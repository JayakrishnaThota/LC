//O(n) time and space
class Solution {
    double max = 0;
    public double maximumAverageSubtree(TreeNode root) {
        if(root==null) return max;
        dfs(root);
        return max;
    }
    
    public double[] dfs(TreeNode root) {
        if(root==null) return new double[]{0,0};
        double[] left = dfs(root.left);
        double[] right = dfs(root.right);
        double sum = left[0] + right[0] + root.val;
        double size = left[1] + right[1] + 1.0;
        max = Math.max(max, sum/size);
        return new double[]{sum, size};
    }
    
}

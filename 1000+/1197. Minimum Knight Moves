
class Solution {
    
    int[][] dirs = new int[][] {{2, 1}, {1, 2}, {-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}, {1, -2}, {2, -1}};
    
    public int minKnightMoves(int x, int y) {
        x = Math.abs(x);
        y = Math.abs(y);
        Queue<int[]> queue = new LinkedList();
        Set<String> visited = new HashSet();
        queue.offer(new int[]{0,0});
        visited.add("0"+","+"0");
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int k=0;k<size;k++){
                int[] temp = queue.poll();
                if(temp[0]==x && temp[1]==y) return level;
                for(int[] dir:dirs){
                    int nx = temp[0] + dir[0];
                    int ny = temp[1] + dir[1];
                    if(!visited.contains(nx+","+ny) && nx>=-1 && ny>=-1) {
                        visited.add(nx+","+ny);
                        queue.offer(new int[]{nx, ny});
                    }
                }
            }
            level++;
        }
        return -1;
    }
    
}

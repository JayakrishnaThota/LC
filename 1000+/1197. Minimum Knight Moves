//O(max(x,y)^2) time and space
class Solution {
    int[][] dirs = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{-2,1},{2,-1},{-2,-1}};
    public int minKnightMoves(int dx, int dy) {
        dx = Math.abs(dx);
        dy = Math.abs(dy);
        Queue<int[]> queue = new LinkedList();
        Set<String> visited = new HashSet();
        queue.offer(new int[]{0,0});
        visited.add(0+","+0);
        if(dx==0 && dy==0) return 0;
        int level = 1;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int[] cell = queue.poll();
                int i = cell[0], j = cell[1];
                for(int[] dir:dirs) {
                    int x = i + dir[0], y = j + dir[1];
                    if(x>=-1 && y>=-1 && !visited.contains(x+","+y)) {
                        if(x==dx && y==dy) return level;
                        queue.offer(new int[]{x,y});
                        visited.add(x+","+y);
                    }
                }
            }
            level++;
        }
        return -1;
    }
}

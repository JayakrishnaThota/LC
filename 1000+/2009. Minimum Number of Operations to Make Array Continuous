//O(nlogn) time and O(n) space
class Solution {
    public int minOperations(int[] nums) {
        if(nums==null || nums.length<2) return 0;
        int n = nums.length, max = 0;
        Arrays.sort(nums);
        Deque<Integer> dq = new ArrayDeque();
        for(int i=0;i<n;i++) {
            int num = nums[i];
            while(!dq.isEmpty() && num-dq.peekLast()>=n) {
                dq.pollLast();
            }
            if(dq.isEmpty() || dq.peekFirst()!=num) {
                dq.offerFirst(num);
            }
            max = Math.max(max, dq.size());
        }
        return n-max;
    }
}

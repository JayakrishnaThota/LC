/*
    S1 + S2 = s
    S1 - S2 = d
    s-d = 2*S2
    d = s - 2*S2
    min(d) = max(S2)
*/
//O(n*sum) time and space
class Solution {
    public int lastStoneWeightII(int[] stones) {
        int sum = 0;
        for(int stone:stones) sum+=stone;
        int s2 = subsetSum(stones, sum);
        return sum-2*s2;
    }
    
    public int subsetSum(int[] nums, int sum) {
        int n = nums.length, s2 = 0;
        boolean[][] dp = new boolean[n+1][sum+1];
        for (int i=0;i<=n;i++) dp[i][0] = true;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum/2;j++){
                dp[i][j] = dp[i-1][j];
                if (j >= nums[i-1]){
                    dp[i][j] = (dp[i][j] || dp[i-1][j-nums[i-1]]);
                }
                if(dp[i][j]) s2 = Math.max(s2, j);
            }
        }
        return s2;
    }
    
}

//O(mn) time and space
class Solution {
    public int nearestExit(char[][] maze, int[] entrance) {
        if(maze==null || maze.length==0) return 0;
        int m = maze.length, n = maze[0].length;
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        Queue<int[]> queue = new LinkedList();
        queue.offer(entrance);
        boolean[][] visited = new boolean[m][n];
        visited[entrance[0]][entrance[1]] = true;
        int level = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int k=0;k<size;k++) {
                int[] cell = queue.poll();
                int i = cell[0], j = cell[1];
                for(int[] dir:dirs) {
                    int x = i + dir[0], y = j + dir[1];
                    if(x<0 || y<0 || x>=m || y>=n || maze[x][y]=='+' || visited[x][y]) 
                        continue;
                    visited[x][y] = true;
                    queue.offer(new int[]{x,y});
                    if(x==0 || y==0 || x==m-1 || y==n-1) return level+1;
                }
            }
            level++;
        }
        return -1;
    }
}

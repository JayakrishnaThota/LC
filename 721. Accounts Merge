//O(nklognk) time and O(nk) space
class Solution {
    Map<String, Set<String>> adjlist;
    Map<String, String> emailToNameMapping;
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        if(accounts==null || accounts.size()==0) return accounts;
        initialize(accounts);
        return traverse();
    }

    private void initialize(List<List<String>> accounts) {
        adjlist = new HashMap();
        emailToNameMapping = new HashMap();
        for(List<String> account:accounts) {
            if(account==null || account.size()<2) continue;
            String name = account.get(0);
            if(account.size()>1) {
                String root = account.get(1);
                emailToNameMapping.put(root, name);
                adjlist.putIfAbsent(root, new HashSet());
                for(int i=2;i<account.size();i++) {
                    adjlist.get(root).add(account.get(i));
                    adjlist.putIfAbsent(account.get(i), new HashSet());
                    adjlist.get(account.get(i)).add(root);
                    emailToNameMapping.put(account.get(i), name);
                }
            }
        }
    }

    private List<List<String>> traverse() {
        List<List<String>> result = new ArrayList();
        Set<String> visited = new HashSet();
        for(String key:adjlist.keySet()) {
            if(visited.contains(key)) continue;
            Queue<String> queue = new LinkedList();
            List<String> list = new ArrayList();
            queue.offer(key);
            visited.add(key);
            list.add(key);
            while(!queue.isEmpty()) {
                int size = queue.size();
                for(int k=0;k<size;k++) {
                    String u = queue.poll();
                    if(adjlist.get(u)==null) continue;
                    for(String v:adjlist.get(u)) {
                        if(!visited.contains(v)) {
                            visited.add(v);
                            list.add(v);
                            queue.offer(v);
                        }
                    }
                }
            }
            Collections.sort(list);
            list.add(0, emailToNameMapping.get(key));
            result.add(list);
        }
        return result;
    }

}

//O(n*n!) time and space
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList();
        List<Integer> list = new ArrayList();
        boolean[] used = new boolean[nums.length];
        backtrack(result, list, nums, used);
        return result; 
    }

    private void backtrack(List<List<Integer>> result, List<Integer> list, int[] nums, boolean[] used) {
        if(list.size()==nums.length) {
            result.add(new ArrayList(list));
            return;
        }
        for(int i=0;i<nums.length;i++) {
            if(used[i]) continue;
            list.add(nums[i]);
            used[i] = true;
            backtrack(result, list, nums, used);
            list.remove(list.size()-1);
            used[i] = false;
        }
    }
}

//O(k+logn) time and O(logn) space
public class Solution {
    
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        List<Integer> result = new ArrayList();
        if(root==null) return result;
        Stack<TreeNode> lowerStack = new Stack();
        Stack<TreeNode> upperStack = new Stack();
        TreeNode iter = root;
        while(iter!=null) {
            if(target>iter.val) {
                lowerStack.push(iter);
                iter = iter.right;
            }
            else {
                upperStack.push(iter);
                iter = iter.left;
            }
        }
        for(int i=0;i<k;i++) {
            if(lowerStack.isEmpty()) {
                TreeNode node = upperStack.pop();
                result.add(node.val);
                goUpperNext(node.right, upperStack);
            }
            else if(upperStack.isEmpty()) {
                TreeNode node = lowerStack.pop();
                result.add(node.val);
                goLowerNext(node.left, lowerStack);
            }
            else if (upperStack.peek().val - target <= target - lowerStack.peek().val) {
                TreeNode top = upperStack.pop();
                result.add(top.val);
                goUpperNext(top.right, upperStack);
            } else if (target - lowerStack.peek().val < upperStack.peek().val - target) {
                TreeNode top = lowerStack.pop();
                result.add(top.val);
                goLowerNext(top.left, lowerStack);
            }
        }
        return result;
    }
    
    public void goUpperNext(TreeNode node, Stack<TreeNode> stack) {
        TreeNode iter = node;
        while (iter != null) {
            stack.push(iter);
            iter = iter.left;
        }
    }
 
    public void goLowerNext(TreeNode node, Stack<TreeNode> stack) {
        TreeNode iter = node;
        while (iter != null) {
            stack.push(iter);
            iter = iter.right;
        }
    } 
    
}

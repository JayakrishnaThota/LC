public class Solution {
    //O(n) time and space
    public int calculate(String s) {
        s = s.trim().replaceAll("[ ]+", "");
        if (s == null || s.length() == 0) {
            return 0;
        }
        Stack<Integer> intStack = new Stack<>();
        Stack<Character> charStack = new Stack<>();
        int index = 0;
        while (index < s.length()) {
            if (Character.isDigit(s.charAt(index))) {
                int num = 0;
                while (index < s.length() && Character.isDigit(s.charAt(index))) {
                    num = num * 10 + Character.getNumericValue(s.charAt(index));
                    index++;
                }
                intStack.push(num);
            } else {
                char c = s.charAt(index);
                if (charStack.isEmpty()) {
                    charStack.push(c);
                    index++;
                } else if (c == '+' || c == '-') {
                    char top = charStack.peek();
                    if (top == '(') {
                        charStack.push(c);
                        index++;
                    } else {
                        calculate(intStack, charStack);
                    }
                } else if (c == '*' || c == '/') {
                    char top = charStack.peek();
                    if (top == '(' || top=='+' || top=='-') {
                        charStack.push(c);
                        index++;
                    } else if (top == '*' || top == '/') {
                        calculate(intStack, charStack);
                    }
                } else if (c == '(') {
                     charStack.push(c);
                        index++;
                } else if (c == ')') {
                    while (charStack.peek() != '(') {
                        calculate(intStack, charStack);
                    }
                    charStack.pop();
                    index++;
                }
            }
        }
 
        while (!charStack.isEmpty()) {
            calculate(intStack, charStack);
        }
 
        return intStack.peek();
    }
     
    public void calculate(Stack<Integer> intStack, Stack<Character> charStack) {
        int a = intStack.pop();
        int b = intStack.pop();
        char c = charStack.pop();
        int result = 0;
        switch(c) {
            case '+':
                result = b + a;
            break;
            case '-':
                result = b - a;
            break;
            case '*':
                result = b * a;
            break;
            case '/':
                result = b / a;
            break;
        }
        intStack.push(result);
    }
    
}

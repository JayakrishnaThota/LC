//O(n) time and space
class Solution {
    public TreeNode str2tree(String s) {
        if(s==null || s.length()==0) return null;
        Stack<TreeNode> stack = new Stack();
        int val = 0, sign = 1;
        for(int i=0; i<=s.length(); i++)
        {
            char c = i<s.length()?s.charAt(i):'(';
            if(Character.isDigit(c)) {
                val = val*10 + c-'0';
            }
            else if(c=='-') {
                sign = -1;
            }
            else if(c=='(') {
                if(s.charAt(i-1)!=')')
                    stack.push(new TreeNode(val*sign));
                val = 0;
                sign = 1;
            }
            else if(c==')') {
                TreeNode child = null;
                if(s.charAt(i-1)!=')')
                {
                    child = new TreeNode(val*sign);
                    sign = 1;
                }
                else //otherwise, we pop the topmost node, like 4(2(3)(1))
                    child = stack.pop();
                
                TreeNode parent = stack.peek();
                if(parent.left ==null)
                    parent.left = child;
                else
                    parent.right = child;
            }
        }
        return stack.pop();
    }
}

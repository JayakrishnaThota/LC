//O(n^3) time and O(1) space
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList();
        if(nums==null || nums.length<4) return res;
        int n = nums.length;
        Arrays.sort(nums);
        for(int j=0;j<n-3;j++) {
            if(j>0 && nums[j]==nums[j-1]) continue;
            for(int i=j+1;i<n-2;i++) {    
                if(i>j+1 && nums[i]==nums[i-1]) continue;
                int low = i+1, high = n-1;
                while(low<high) {
                    long sum = (long) nums[j] + nums[i] + nums[low] + nums[high];
                    if(sum==target) {
                        res.add(Arrays.asList(nums[i], nums[low], nums[high], nums[j]));
                        while(low<high && nums[low]==nums[low+1]) low++;
                        while(low<high && nums[high]==nums[high-1]) high--;
                        low++;
                        high--;
                    } else if (sum>target) {
                        high--;
                    } else {
                        low++;
                    }
                }
            }
        }
        return res;
    }
}

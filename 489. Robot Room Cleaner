/**
 * // This is the robot's control interface.
 * // You should not implement it, or speculate about its implementation
 * interface Robot {
 *     // Returns true if the cell in front is open and robot moves into the cell.
 *     // Returns false if the cell in front is blocked and robot stays in the current cell.
 *     public boolean move();
 *
 *     // Robot will stay in the same cell after calling turnLeft/turnRight.
 *     // Each turn will be 90 degrees.
 *     public void turnLeft();
 *     public void turnRight();
 *
 *     // Clean the current cell.
 *     public void clean();
 * }
 */

class Solution {
    public void cleanRoom(Robot robot) {
        backtrack(robot, 0, 0, 0, new HashSet<String>());
    }
    
    public void backtrack(Robot robot, int i, int j, int dir, Set<String> visited) {
        String path = i+","+j;
        if(visited.contains(path)) return;
        visited.add(path);
        robot.clean();
        for (int n = 0; n < 4; n++) {
    		if (robot.move()) {
    			int x = i, y = j;
    			switch (dir) {
    				case 0:
    					// go up, reduce i
    					x = i - 1;
    					break;
    				case 90:
    					// go right
    					y = j + 1;
    					break;
    				case 180:
    					// go down
    					x = i + 1;
    					break;
    				case 270:
    					// go left
    					y = j - 1;
    					break;
    				default:
    					break;
    			}
    			backtrack(robot, set, x, y, dir);
			    robot.turnLeft();
    			robot.turnLeft();
    			robot.move();
    			robot.turnRight();
    			robot.turnRight();

    		}
    		robot.turnRight();
    		dir += 90;
    		dir %= 360;
    	}
    }
}

class SnakeGame {

    int width;
    int height;
    int[][] food;
    Set<Integer> set;
    Deque<Integer> dq;
    int foodIndex;
    int score;
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.food = food;
        set = new HashSet();
        dq = new LinkedList();
        set.add(0);
        dq.offer(0);
        this.foodIndex = 0;
        this.score = 0;
    }
    
    
    public int move(String direction) {
        if(score==-1) return -1;
        int x = dq.peekFirst()/width;
        int y = dq.peekFirst()%width;
        switch(direction){
            case "L":
                y--;
                break;
            case "R":
                y++;
                break;
            case "U":
                x--;
                break;
            case "D":
                x++;
                break;
        }
        int head = x*width + y;
        set.remove(dq.peekLast());
        //Check if game is over
        if(x<0 || x>=this.height || y<0 || y>=this.width || set.contains(head)){
            return -1;
        }
        //Move the snake in that direction
        set.add(head);
        dq.offerFirst(head);
        //Food condition
        if(foodIndex<food.length && x==food[foodIndex][0] && y==food[foodIndex][1]){
            set.add(dq.peekLast());
            foodIndex++;
            return ++score;
        }
        dq.pollLast();
        return score;
    }
}

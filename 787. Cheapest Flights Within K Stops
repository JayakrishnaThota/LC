class Solution {
    Map<Integer, Map<Integer, Integer>> adjlist;
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        construct(flights);
        return dijkstra(src, dst, k);
    }

    //O(e) time and O(v+e) space
    private void construct(int[][] flights) {
        adjlist = new HashMap<>();
        for (int[] flight : flights) {
            int u = flight[0], v = flight[1], w = flight[2];
            adjlist.putIfAbsent(u, new HashMap<>());
            adjlist.get(u).put(v, w);
        }
    }

    //O(elogv) time and O(v*k + e) space
    private int dijkstra(int src, int dst, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.offer(new int[]{0, src, 0}); // cost, node, stops

        Map<Integer, Integer> visitedStops = new HashMap<>();

        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int cost = curr[0], node = curr[1], stops = curr[2];

            if (node == dst) {
                return cost;
            }

            if (visitedStops.containsKey(node) && visitedStops.get(node) <= stops) {
                continue;
            }

            visitedStops.put(node, stops);

            if (stops > k) {
                continue;
            }

            Map<Integer, Integer> neighbors = adjlist.getOrDefault(node, new HashMap<>());
            for (Integer neighbor : neighbors.keySet()) {
                int price = neighbors.get(neighbor);
                pq.offer(new int[]{cost + price, neighbor, stops + 1});
            }
        }

        return -1;
    }
}

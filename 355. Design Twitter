class Twitter {

    private static int timeStamp = 0;
    class Tweet {
        int tweetId;
        int userId;
        int timeStamp;
        public Tweet(int tweetId, int userId, int timeStamp) {
            this.tweetId = tweetId;
            this.userId = userId;
            this.timeStamp = timeStamp;
        }   
    }

    LinkedList<Tweet> allTweets;
    Map<Integer, Set<Integer>> userFollows;
    public Twitter() {
        allTweets = new LinkedList();
        userFollows = new HashMap();
    }
    
    //O(1) time
    public void postTweet(int userId, int tweetId) {
        allTweets.addFirst(new Tweet(tweetId, userId, timeStamp++));
    }
    
    //O(n) time
    public List<Integer> getNewsFeed(int userId) {
        List<Integer> newsFeed = new LinkedList<>();
        Set<Integer> followedUsers = userFollows.getOrDefault(userId, new HashSet<>());
        followedUsers.add(userId);
        for (Tweet tweet : allTweets) {
            if (followedUsers.contains(tweet.userId)) {
                newsFeed.add(tweet.tweetId);
            }
            if (newsFeed.size() == 10) {
                break;
            }
        }
        return newsFeed;
    }
    
    //O(1) time
    public void follow(int followerId, int followeeId) {
        if(followerId==followeeId) {
            return;
        }
        userFollows.putIfAbsent(followerId, new HashSet());
        userFollows.get(followerId).add(followeeId);
    }
    
    //O(1) time
    public void unfollow(int followerId, int followeeId) {
          if(followerId==followeeId) {
            return;
        }
        if(userFollows.containsKey(followerId)) {
            userFollows.get(followerId).remove(followeeId);
        }
    }
}

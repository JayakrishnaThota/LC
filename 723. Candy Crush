//O(mn)^2 time and O(1) space
class Solution {
    public int[][] candyCrush(int[][] board) {
        if(board==null || board.length==0) return new int[0][0];
        int m = board.length, n = board[0].length;
        boolean done = true;
        for(int i=0;i<m;i++){
            for(int j=0;j<n-2;j++){
                int candy = Math.abs(board[i][j]);
                if(candy!=0 && Math.abs(board[i][j+1])==candy && Math.abs(board[i][j+2])==candy){
                    board[i][j] = board[i][j+1] = board[i][j+2] = -candy;
                    done = false;
                }
            }
        }
        for(int i=0;i<m-2;i++){
            for(int j=0;j<n;j++){
                int candy = Math.abs(board[i][j]);
                if(candy!=0 && Math.abs(board[i+1][j])==candy && Math.abs(board[i+2][j])==candy){
                    board[i][j] = board[i+1][j] = board[i+2][j] = -candy;
                    done = false;
                }
            }
        }
        for(int j=0;j<n;j++){
            int r = m-1;
            for(int i=m-1;i>=0;i--){
                if(board[i][j]>0){
                    board[r--][j] = board[i][j];
                }
            }
            while(r>=0) board[r--][j] = 0;
        }
        return done?board:candyCrush(board);
    }
}

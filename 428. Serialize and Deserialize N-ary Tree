class Codec {
    //O(n) time and space
    public String serialize(Node root) {
        if(root==null) return "";
        StringBuffer sb = new StringBuffer();
        preorder(root, sb);
        return sb.toString();
    }
    
    public void preorder(Node root, StringBuffer sb) {
        if(root==null) return;
        sb.append(root.val+",");
        sb.append(root.children.size()+",");
        for(Node child:root.children) {
            preorder(child, sb);
        }
    }
	
    //O(n) time and space
    public Node deserialize(String data) {
        if(data==null || data.length()==0) return null;
        String[] tokens = data.split(",");
        Queue<String> queue = new LinkedList(Arrays.asList(tokens));
        return preorder(queue);
    }
    
    public Node preorder(Queue<String> queue) {
        Node root = new Node();
        root.val = Integer.parseInt(queue.poll());
        int size = Integer.parseInt(queue.poll());
        root.children = new ArrayList(size);
        for(int i=0;i<size;i++) {
            root.children.add(preorder(queue));
        }
        return root;
    }
    
}
